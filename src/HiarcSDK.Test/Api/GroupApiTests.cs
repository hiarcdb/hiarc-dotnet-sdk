/* 
 * Hiarc API
 *
 * Welcome to the Hiarc API documentation.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using HiarcSDK.Client;
using HiarcSDK.Api;
using HiarcSDK.Model;

namespace HiarcSDK.Test
{
    /// <summary>
    ///  Class for testing GroupApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class GroupApiTests : IDisposable
    {
        private GroupApi instance;

        public GroupApiTests()
        {
            instance = new GroupApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of GroupApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' GroupApi
            //Assert.IsType(typeof(GroupApi), instance, "instance is a GroupApi");
        }

        
        /// <summary>
        /// Test AddUserToGroup
        /// </summary>
        [Fact]
        public void AddUserToGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string key = null;
            //string userKey = null;
            //var response = instance.AddUserToGroup(key, userKey);
            //Assert.IsType<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test CreateGroup
        /// </summary>
        [Fact]
        public void CreateGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateGroupRequest createGroupRequest = null;
            //var response = instance.CreateGroup(createGroupRequest);
            //Assert.IsType<Group> (response, "response is Group");
        }
        
        /// <summary>
        /// Test DeleteGroup
        /// </summary>
        [Fact]
        public void DeleteGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string key = null;
            //var response = instance.DeleteGroup(key);
            //Assert.IsType<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test FindGroup
        /// </summary>
        [Fact]
        public void FindGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //FindGroupsRequest findGroupsRequest = null;
            //var response = instance.FindGroup(findGroupsRequest);
            //Assert.IsType<List<Group>> (response, "response is List<Group>");
        }
        
        /// <summary>
        /// Test GetAllGroups
        /// </summary>
        [Fact]
        public void GetAllGroupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetAllGroups();
            //Assert.IsType<List<Group>> (response, "response is List<Group>");
        }
        
        /// <summary>
        /// Test GetGroup
        /// </summary>
        [Fact]
        public void GetGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string key = null;
            //var response = instance.GetGroup(key);
            //Assert.IsType<Group> (response, "response is Group");
        }
        
        /// <summary>
        /// Test GetGroupsForCurrentUser
        /// </summary>
        [Fact]
        public void GetGroupsForCurrentUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xHiarcUserKey = null;
            //var response = instance.GetGroupsForCurrentUser(xHiarcUserKey);
            //Assert.IsType<List<Group>> (response, "response is List<Group>");
        }
        
        /// <summary>
        /// Test UpdateGroup
        /// </summary>
        [Fact]
        public void UpdateGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string key = null;
            //UpdateGroupRequest updateGroupRequest = null;
            //var response = instance.UpdateGroup(key, updateGroupRequest);
            //Assert.IsType<Group> (response, "response is Group");
        }
        
    }

}
