/* 
 * Hiarc API
 *
 * Welcome to the Hiarc API documentation.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using HiarcSDK.Client;
using HiarcSDK.Api;
using HiarcSDK.Model;

namespace HiarcSDK.Test
{
    /// <summary>
    ///  Class for testing FileApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class FileApiTests : IDisposable
    {
        private FileApi instance;

        public FileApiTests()
        {
            instance = new FileApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of FileApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' FileApi
            //Assert.IsType(typeof(FileApi), instance, "instance is a FileApi");
        }

        
        /// <summary>
        /// Test AddClassificationToFile
        /// </summary>
        [Fact]
        public void AddClassificationToFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string key = null;
            //AddClassificationToFileRequest addClassificationToFileRequest = null;
            //string xHiarcUserKey = null;
            //var response = instance.AddClassificationToFile(key, addClassificationToFileRequest, xHiarcUserKey);
            //Assert.IsType<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test AddGroupToFile
        /// </summary>
        [Fact]
        public void AddGroupToFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string key = null;
            //AddGroupToFileRequest addGroupToFileRequest = null;
            //string xHiarcUserKey = null;
            //var response = instance.AddGroupToFile(key, addGroupToFileRequest, xHiarcUserKey);
            //Assert.IsType<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test AddRetentionPolicyToFile
        /// </summary>
        [Fact]
        public void AddRetentionPolicyToFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string key = null;
            //AddRetentionPolicyToFileRequest addRetentionPolicyToFileRequest = null;
            //string xHiarcUserKey = null;
            //var response = instance.AddRetentionPolicyToFile(key, addRetentionPolicyToFileRequest, xHiarcUserKey);
            //Assert.IsType<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test AddUserToFile
        /// </summary>
        [Fact]
        public void AddUserToFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string key = null;
            //AddUserToFileRequest addUserToFileRequest = null;
            //string xHiarcUserKey = null;
            //var response = instance.AddUserToFile(key, addUserToFileRequest, xHiarcUserKey);
            //Assert.IsType<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test AddVersion
        /// </summary>
        [Fact]
        public void AddVersionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string key = null;
            //string xHiarcUserKey = null;
            //string request = null;
            //System.IO.Stream file = null;
            //var response = instance.AddVersion(key, xHiarcUserKey, request, file);
            //Assert.IsType<File> (response, "response is File");
        }
        
        /// <summary>
        /// Test AttachToExisitingFile
        /// </summary>
        [Fact]
        public void AttachToExisitingFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string key = null;
            //AttachToExistingFileRequest attachToExistingFileRequest = null;
            //string xHiarcUserKey = null;
            //var response = instance.AttachToExisitingFile(key, attachToExistingFileRequest, xHiarcUserKey);
            //Assert.IsType<File> (response, "response is File");
        }
        
        /// <summary>
        /// Test CopyFile
        /// </summary>
        [Fact]
        public void CopyFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string key = null;
            //CopyFileRequest copyFileRequest = null;
            //string xHiarcUserKey = null;
            //var response = instance.CopyFile(key, copyFileRequest, xHiarcUserKey);
            //Assert.IsType<File> (response, "response is File");
        }
        
        /// <summary>
        /// Test CreateDirectUploadUrl
        /// </summary>
        [Fact]
        public void CreateDirectUploadUrlTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateDirectUploadUrlRequest createDirectUploadUrlRequest = null;
            //string xHiarcUserKey = null;
            //int? expiresInSeconds = null;
            //var response = instance.CreateDirectUploadUrl(createDirectUploadUrlRequest, xHiarcUserKey, expiresInSeconds);
            //Assert.IsType<FileDirectUpload> (response, "response is FileDirectUpload");
        }
        
        /// <summary>
        /// Test CreateFile
        /// </summary>
        [Fact]
        public void CreateFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xHiarcUserKey = null;
            //string request = null;
            //System.IO.Stream file = null;
            //var response = instance.CreateFile(xHiarcUserKey, request, file);
            //Assert.IsType<File> (response, "response is File");
        }
        
        /// <summary>
        /// Test DeleteFile
        /// </summary>
        [Fact]
        public void DeleteFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string key = null;
            //string xHiarcUserKey = null;
            //var response = instance.DeleteFile(key, xHiarcUserKey);
            //Assert.IsType<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test DownloadFile
        /// </summary>
        [Fact]
        public void DownloadFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string key = null;
            //string xHiarcUserKey = null;
            //var response = instance.DownloadFile(key, xHiarcUserKey);
            //Assert.IsType<System.IO.Stream> (response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test GetCollectionsForFile
        /// </summary>
        [Fact]
        public void GetCollectionsForFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string key = null;
            //string xHiarcUserKey = null;
            //var response = instance.GetCollectionsForFile(key, xHiarcUserKey);
            //Assert.IsType<List<Collection>> (response, "response is List<Collection>");
        }
        
        /// <summary>
        /// Test GetDirectDownloadUrl
        /// </summary>
        [Fact]
        public void GetDirectDownloadUrlTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string key = null;
            //string xHiarcUserKey = null;
            //int? expiresInSeconds = null;
            //var response = instance.GetDirectDownloadUrl(key, xHiarcUserKey, expiresInSeconds);
            //Assert.IsType<FileDirectDownload> (response, "response is FileDirectDownload");
        }
        
        /// <summary>
        /// Test GetFile
        /// </summary>
        [Fact]
        public void GetFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string key = null;
            //string xHiarcUserKey = null;
            //var response = instance.GetFile(key, xHiarcUserKey);
            //Assert.IsType<File> (response, "response is File");
        }
        
        /// <summary>
        /// Test GetRetentionPolicies
        /// </summary>
        [Fact]
        public void GetRetentionPoliciesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string key = null;
            //string xHiarcUserKey = null;
            //var response = instance.GetRetentionPolicies(key, xHiarcUserKey);
            //Assert.IsType<List<RetentionPolicyApplication>> (response, "response is List<RetentionPolicyApplication>");
        }
        
        /// <summary>
        /// Test GetVersions
        /// </summary>
        [Fact]
        public void GetVersionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string key = null;
            //string xHiarcUserKey = null;
            //var response = instance.GetVersions(key, xHiarcUserKey);
            //Assert.IsType<List<FileVersion>> (response, "response is List<FileVersion>");
        }
        
        /// <summary>
        /// Test UpdateFile
        /// </summary>
        [Fact]
        public void UpdateFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string key = null;
            //UpdateFileRequest updateFileRequest = null;
            //var response = instance.UpdateFile(key, updateFileRequest);
            //Assert.IsType<File> (response, "response is File");
        }
        
    }

}
