/* 
 * Hiarc API
 *
 * Welcome to the Hiarc API documentation.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HiarcSDK.Client.OpenAPIDateConverter;

namespace HiarcSDK.Model
{
    /// <summary>
    /// FileDirectDownload
    /// </summary>
    [DataContract]
    public partial class FileDirectDownload :  IEquatable<FileDirectDownload>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FileDirectDownload" /> class.
        /// </summary>
        /// <param name="key">key.</param>
        /// <param name="directDownloadUrl">directDownloadUrl.</param>
        /// <param name="expiresAt">expiresAt.</param>
        public FileDirectDownload(string key = default(string), string directDownloadUrl = default(string), DateTime expiresAt = default(DateTime))
        {
            this.Key = key;
            this.DirectDownloadUrl = directDownloadUrl;
            this.ExpiresAt = expiresAt;
        }
        
        /// <summary>
        /// Gets or Sets Key
        /// </summary>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }

        /// <summary>
        /// Gets or Sets DirectDownloadUrl
        /// </summary>
        [DataMember(Name="directDownloadUrl", EmitDefaultValue=false)]
        public string DirectDownloadUrl { get; set; }

        /// <summary>
        /// Gets or Sets ExpiresAt
        /// </summary>
        [DataMember(Name="expiresAt", EmitDefaultValue=false)]
        public DateTime ExpiresAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FileDirectDownload {\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  DirectDownloadUrl: ").Append(DirectDownloadUrl).Append("\n");
            sb.Append("  ExpiresAt: ").Append(ExpiresAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FileDirectDownload);
        }

        /// <summary>
        /// Returns true if FileDirectDownload instances are equal
        /// </summary>
        /// <param name="input">Instance of FileDirectDownload to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FileDirectDownload input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.DirectDownloadUrl == input.DirectDownloadUrl ||
                    (this.DirectDownloadUrl != null &&
                    this.DirectDownloadUrl.Equals(input.DirectDownloadUrl))
                ) && 
                (
                    this.ExpiresAt == input.ExpiresAt ||
                    (this.ExpiresAt != null &&
                    this.ExpiresAt.Equals(input.ExpiresAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Key != null)
                    hashCode = hashCode * 59 + this.Key.GetHashCode();
                if (this.DirectDownloadUrl != null)
                    hashCode = hashCode * 59 + this.DirectDownloadUrl.GetHashCode();
                if (this.ExpiresAt != null)
                    hashCode = hashCode * 59 + this.ExpiresAt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
