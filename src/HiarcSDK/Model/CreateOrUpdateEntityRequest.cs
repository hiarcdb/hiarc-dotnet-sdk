/* 
 * Hiarc API
 *
 * Welcome to the Hiarc API documentation.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HiarcSDK.Client.OpenAPIDateConverter;

namespace HiarcSDK.Model
{
    /// <summary>
    /// CreateOrUpdateEntityRequest
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "Key")]
    [JsonSubtypes.KnownSubType(typeof(UpdateCollectionRequest), "UpdateCollectionRequest")]
    [JsonSubtypes.KnownSubType(typeof(UpdateClassificationRequest), "UpdateClassificationRequest")]
    [JsonSubtypes.KnownSubType(typeof(CreateCollectionRequest), "CreateCollectionRequest")]
    [JsonSubtypes.KnownSubType(typeof(CreateGroupRequest), "CreateGroupRequest")]
    [JsonSubtypes.KnownSubType(typeof(UpdateRetentionPolicyRequest), "UpdateRetentionPolicyRequest")]
    [JsonSubtypes.KnownSubType(typeof(CreateUserRequest), "CreateUserRequest")]
    [JsonSubtypes.KnownSubType(typeof(UpdateUserRequest), "UpdateUserRequest")]
    [JsonSubtypes.KnownSubType(typeof(CreateLegalHoldRequest), "CreateLegalHoldRequest")]
    [JsonSubtypes.KnownSubType(typeof(UpdateGroupRequest), "UpdateGroupRequest")]
    [JsonSubtypes.KnownSubType(typeof(CreateFileRequest), "CreateFileRequest")]
    [JsonSubtypes.KnownSubType(typeof(CreateClassificationRequest), "CreateClassificationRequest")]
    [JsonSubtypes.KnownSubType(typeof(CreateRetentionPolicyRequest), "CreateRetentionPolicyRequest")]
    [JsonSubtypes.KnownSubType(typeof(CreateUserRequest), "createUser")]
    [JsonSubtypes.KnownSubType(typeof(UpdateUserRequest), "updateUser")]
    [JsonSubtypes.KnownSubType(typeof(CreateGroupRequest), "createGroup")]
    [JsonSubtypes.KnownSubType(typeof(UpdateGroupRequest), "updateGroup")]
    [JsonSubtypes.KnownSubType(typeof(CreateCollectionRequest), "createCollection")]
    [JsonSubtypes.KnownSubType(typeof(UpdateCollectionRequest), "updateCollection")]
    [JsonSubtypes.KnownSubType(typeof(CreateFileRequest), "createFile")]
    [JsonSubtypes.KnownSubType(typeof(CreateClassificationRequest), "createClassification")]
    [JsonSubtypes.KnownSubType(typeof(UpdateClassificationRequest), "updateClassification")]
    [JsonSubtypes.KnownSubType(typeof(CreateLegalHoldRequest), "createLegalHold")]
    [JsonSubtypes.KnownSubType(typeof(CreateRetentionPolicyRequest), "createRetentionPolicy")]
    [JsonSubtypes.KnownSubType(typeof(UpdateRetentionPolicyRequest), "updateRetentionPolicy")]
    public partial class CreateOrUpdateEntityRequest :  IEquatable<CreateOrUpdateEntityRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateOrUpdateEntityRequest" /> class.
        /// </summary>
        /// <param name="key">key.</param>
        /// <param name="name">name.</param>
        /// <param name="description">description.</param>
        /// <param name="metadata">metadata.</param>
        public CreateOrUpdateEntityRequest(string key = default(string), string name = default(string), string description = default(string), Dictionary<string, Object> metadata = default(Dictionary<string, Object>))
        {
            this.Key = key;
            this.Name = name;
            this.Description = description;
            this.Metadata = metadata;
        }
        
        /// <summary>
        /// Gets or Sets Key
        /// </summary>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public Dictionary<string, Object> Metadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateOrUpdateEntityRequest {\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateOrUpdateEntityRequest);
        }

        /// <summary>
        /// Returns true if CreateOrUpdateEntityRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateOrUpdateEntityRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateOrUpdateEntityRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    this.Metadata != null &&
                    input.Metadata != null &&
                    this.Metadata.SequenceEqual(input.Metadata)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Key != null)
                    hashCode = hashCode * 59 + this.Key.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
