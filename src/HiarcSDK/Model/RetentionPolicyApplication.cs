/* 
 * Hiarc API
 *
 * Welcome to the Hiarc API documentation.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HiarcSDK.Client.OpenAPIDateConverter;

namespace HiarcSDK.Model
{
    /// <summary>
    /// RetentionPolicyApplication
    /// </summary>
    [DataContract]
    public partial class RetentionPolicyApplication :  IEquatable<RetentionPolicyApplication>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RetentionPolicyApplication" /> class.
        /// </summary>
        /// <param name="retentionPolicy">retentionPolicy.</param>
        /// <param name="appliedAt">appliedAt.</param>
        /// <param name="expiresAt">expiresAt.</param>
        public RetentionPolicyApplication(RetentionPolicy retentionPolicy = default(RetentionPolicy), DateTime appliedAt = default(DateTime), DateTime expiresAt = default(DateTime))
        {
            this.RetentionPolicy = retentionPolicy;
            this.AppliedAt = appliedAt;
            this.ExpiresAt = expiresAt;
        }
        
        /// <summary>
        /// Gets or Sets RetentionPolicy
        /// </summary>
        [DataMember(Name="retentionPolicy", EmitDefaultValue=false)]
        public RetentionPolicy RetentionPolicy { get; set; }

        /// <summary>
        /// Gets or Sets AppliedAt
        /// </summary>
        [DataMember(Name="appliedAt", EmitDefaultValue=false)]
        public DateTime AppliedAt { get; set; }

        /// <summary>
        /// Gets or Sets ExpiresAt
        /// </summary>
        [DataMember(Name="expiresAt", EmitDefaultValue=false)]
        public DateTime ExpiresAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RetentionPolicyApplication {\n");
            sb.Append("  RetentionPolicy: ").Append(RetentionPolicy).Append("\n");
            sb.Append("  AppliedAt: ").Append(AppliedAt).Append("\n");
            sb.Append("  ExpiresAt: ").Append(ExpiresAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RetentionPolicyApplication);
        }

        /// <summary>
        /// Returns true if RetentionPolicyApplication instances are equal
        /// </summary>
        /// <param name="input">Instance of RetentionPolicyApplication to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RetentionPolicyApplication input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RetentionPolicy == input.RetentionPolicy ||
                    (this.RetentionPolicy != null &&
                    this.RetentionPolicy.Equals(input.RetentionPolicy))
                ) && 
                (
                    this.AppliedAt == input.AppliedAt ||
                    (this.AppliedAt != null &&
                    this.AppliedAt.Equals(input.AppliedAt))
                ) && 
                (
                    this.ExpiresAt == input.ExpiresAt ||
                    (this.ExpiresAt != null &&
                    this.ExpiresAt.Equals(input.ExpiresAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RetentionPolicy != null)
                    hashCode = hashCode * 59 + this.RetentionPolicy.GetHashCode();
                if (this.AppliedAt != null)
                    hashCode = hashCode * 59 + this.AppliedAt.GetHashCode();
                if (this.ExpiresAt != null)
                    hashCode = hashCode * 59 + this.ExpiresAt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
