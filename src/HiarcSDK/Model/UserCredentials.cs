/* 
 * Hiarc API
 *
 * Welcome to the Hiarc API documentation.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HiarcSDK.Client.OpenAPIDateConverter;

namespace HiarcSDK.Model
{
    /// <summary>
    /// UserCredentials
    /// </summary>
    [DataContract]
    public partial class UserCredentials :  IEquatable<UserCredentials>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserCredentials" /> class.
        /// </summary>
        /// <param name="userKey">userKey.</param>
        /// <param name="bearerToken">bearerToken.</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="expiresAt">expiresAt.</param>
        public UserCredentials(string userKey = default(string), string bearerToken = default(string), DateTime createdAt = default(DateTime), DateTime expiresAt = default(DateTime))
        {
            this.UserKey = userKey;
            this.BearerToken = bearerToken;
            this.CreatedAt = createdAt;
            this.ExpiresAt = expiresAt;
        }
        
        /// <summary>
        /// Gets or Sets UserKey
        /// </summary>
        [DataMember(Name="userKey", EmitDefaultValue=false)]
        public string UserKey { get; set; }

        /// <summary>
        /// Gets or Sets BearerToken
        /// </summary>
        [DataMember(Name="bearerToken", EmitDefaultValue=false)]
        public string BearerToken { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="createdAt", EmitDefaultValue=false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets ExpiresAt
        /// </summary>
        [DataMember(Name="expiresAt", EmitDefaultValue=false)]
        public DateTime ExpiresAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserCredentials {\n");
            sb.Append("  UserKey: ").Append(UserKey).Append("\n");
            sb.Append("  BearerToken: ").Append(BearerToken).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  ExpiresAt: ").Append(ExpiresAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserCredentials);
        }

        /// <summary>
        /// Returns true if UserCredentials instances are equal
        /// </summary>
        /// <param name="input">Instance of UserCredentials to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserCredentials input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UserKey == input.UserKey ||
                    (this.UserKey != null &&
                    this.UserKey.Equals(input.UserKey))
                ) && 
                (
                    this.BearerToken == input.BearerToken ||
                    (this.BearerToken != null &&
                    this.BearerToken.Equals(input.BearerToken))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.ExpiresAt == input.ExpiresAt ||
                    (this.ExpiresAt != null &&
                    this.ExpiresAt.Equals(input.ExpiresAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UserKey != null)
                    hashCode = hashCode * 59 + this.UserKey.GetHashCode();
                if (this.BearerToken != null)
                    hashCode = hashCode * 59 + this.BearerToken.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.ExpiresAt != null)
                    hashCode = hashCode * 59 + this.ExpiresAt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
