/* 
 * Hiarc API
 *
 * Welcome to the Hiarc API documentation.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HiarcSDK.Client.OpenAPIDateConverter;

namespace HiarcSDK.Model
{
    /// <summary>
    /// AddGroupToCollectionRequest
    /// </summary>
    [DataContract]
    public partial class AddGroupToCollectionRequest :  IEquatable<AddGroupToCollectionRequest>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets AccessLevel
        /// </summary>
        [DataMember(Name="accessLevel", EmitDefaultValue=false)]
        public AccessLevel? AccessLevel { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AddGroupToCollectionRequest" /> class.
        /// </summary>
        /// <param name="groupKey">groupKey.</param>
        /// <param name="accessLevel">accessLevel.</param>
        public AddGroupToCollectionRequest(string groupKey = default(string), AccessLevel? accessLevel = default(AccessLevel?))
        {
            this.GroupKey = groupKey;
            this.AccessLevel = accessLevel;
        }
        
        /// <summary>
        /// Gets or Sets GroupKey
        /// </summary>
        [DataMember(Name="groupKey", EmitDefaultValue=false)]
        public string GroupKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AddGroupToCollectionRequest {\n");
            sb.Append("  GroupKey: ").Append(GroupKey).Append("\n");
            sb.Append("  AccessLevel: ").Append(AccessLevel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AddGroupToCollectionRequest);
        }

        /// <summary>
        /// Returns true if AddGroupToCollectionRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of AddGroupToCollectionRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddGroupToCollectionRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.GroupKey == input.GroupKey ||
                    (this.GroupKey != null &&
                    this.GroupKey.Equals(input.GroupKey))
                ) && 
                (
                    this.AccessLevel == input.AccessLevel ||
                    this.AccessLevel.Equals(input.AccessLevel)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.GroupKey != null)
                    hashCode = hashCode * 59 + this.GroupKey.GetHashCode();
                hashCode = hashCode * 59 + this.AccessLevel.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
