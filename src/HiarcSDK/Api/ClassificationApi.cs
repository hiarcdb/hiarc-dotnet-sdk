/* 
 * Hiarc API
 *
 * Welcome to the Hiarc API documentation.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using HiarcSDK.Client;
using HiarcSDK.Model;

namespace HiarcSDK.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IClassificationApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a Classification
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createClassificationRequest">Classification information</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Classification</returns>
        Classification CreateClassification (CreateClassificationRequest createClassificationRequest, string xHiarcUserKey = default(string));

        /// <summary>
        /// Create a Classification
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createClassificationRequest">Classification information</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>ApiResponse of Classification</returns>
        ApiResponse<Classification> CreateClassificationWithHttpInfo (CreateClassificationRequest createClassificationRequest, string xHiarcUserKey = default(string));
        /// <summary>
        /// Delete a Classification
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Classification to delete</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Object</returns>
        Object DeleteClassification (string key, string xHiarcUserKey = default(string));

        /// <summary>
        /// Delete a Classification
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Classification to delete</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteClassificationWithHttpInfo (string key, string xHiarcUserKey = default(string));
        /// <summary>
        /// Find a Classification
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findClassificationsRequest">Classification query</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>List&lt;Classification&gt;</returns>
        List<Classification> FindClassification (FindClassificationsRequest findClassificationsRequest, string xHiarcUserKey = default(string));

        /// <summary>
        /// Find a Classification
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findClassificationsRequest">Classification query</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>ApiResponse of List&lt;Classification&gt;</returns>
        ApiResponse<List<Classification>> FindClassificationWithHttpInfo (FindClassificationsRequest findClassificationsRequest, string xHiarcUserKey = default(string));
        /// <summary>
        /// Get all Classifications
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>List&lt;Classification&gt;</returns>
        List<Classification> GetAllClassifications (string xHiarcUserKey = default(string));

        /// <summary>
        /// Get all Classifications
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>ApiResponse of List&lt;Classification&gt;</returns>
        ApiResponse<List<Classification>> GetAllClassificationsWithHttpInfo (string xHiarcUserKey = default(string));
        /// <summary>
        /// Get a Classification&#39;s Info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Classification to get info</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Classification</returns>
        Classification GetClassification (string key, string xHiarcUserKey = default(string));

        /// <summary>
        /// Get a Classification&#39;s Info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Classification to get info</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>ApiResponse of Classification</returns>
        ApiResponse<Classification> GetClassificationWithHttpInfo (string key, string xHiarcUserKey = default(string));
        /// <summary>
        /// Update a Classification
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Classification to get info</param>
        /// <param name="updateClassificationRequest">Classification information</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Classification</returns>
        Classification UpdateClassification (string key, UpdateClassificationRequest updateClassificationRequest, string xHiarcUserKey = default(string));

        /// <summary>
        /// Update a Classification
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Classification to get info</param>
        /// <param name="updateClassificationRequest">Classification information</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>ApiResponse of Classification</returns>
        ApiResponse<Classification> UpdateClassificationWithHttpInfo (string key, UpdateClassificationRequest updateClassificationRequest, string xHiarcUserKey = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IClassificationApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a Classification
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createClassificationRequest">Classification information</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of Classification</returns>
        System.Threading.Tasks.Task<Classification> CreateClassificationAsync (CreateClassificationRequest createClassificationRequest, string xHiarcUserKey = default(string));

        /// <summary>
        /// Create a Classification
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createClassificationRequest">Classification information</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of ApiResponse (Classification)</returns>
        System.Threading.Tasks.Task<ApiResponse<Classification>> CreateClassificationAsyncWithHttpInfo (CreateClassificationRequest createClassificationRequest, string xHiarcUserKey = default(string));
        /// <summary>
        /// Delete a Classification
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Classification to delete</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteClassificationAsync (string key, string xHiarcUserKey = default(string));

        /// <summary>
        /// Delete a Classification
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Classification to delete</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteClassificationAsyncWithHttpInfo (string key, string xHiarcUserKey = default(string));
        /// <summary>
        /// Find a Classification
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findClassificationsRequest">Classification query</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of List&lt;Classification&gt;</returns>
        System.Threading.Tasks.Task<List<Classification>> FindClassificationAsync (FindClassificationsRequest findClassificationsRequest, string xHiarcUserKey = default(string));

        /// <summary>
        /// Find a Classification
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findClassificationsRequest">Classification query</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Classification&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Classification>>> FindClassificationAsyncWithHttpInfo (FindClassificationsRequest findClassificationsRequest, string xHiarcUserKey = default(string));
        /// <summary>
        /// Get all Classifications
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of List&lt;Classification&gt;</returns>
        System.Threading.Tasks.Task<List<Classification>> GetAllClassificationsAsync (string xHiarcUserKey = default(string));

        /// <summary>
        /// Get all Classifications
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Classification&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Classification>>> GetAllClassificationsAsyncWithHttpInfo (string xHiarcUserKey = default(string));
        /// <summary>
        /// Get a Classification&#39;s Info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Classification to get info</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of Classification</returns>
        System.Threading.Tasks.Task<Classification> GetClassificationAsync (string key, string xHiarcUserKey = default(string));

        /// <summary>
        /// Get a Classification&#39;s Info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Classification to get info</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of ApiResponse (Classification)</returns>
        System.Threading.Tasks.Task<ApiResponse<Classification>> GetClassificationAsyncWithHttpInfo (string key, string xHiarcUserKey = default(string));
        /// <summary>
        /// Update a Classification
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Classification to get info</param>
        /// <param name="updateClassificationRequest">Classification information</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of Classification</returns>
        System.Threading.Tasks.Task<Classification> UpdateClassificationAsync (string key, UpdateClassificationRequest updateClassificationRequest, string xHiarcUserKey = default(string));

        /// <summary>
        /// Update a Classification
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Classification to get info</param>
        /// <param name="updateClassificationRequest">Classification information</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of ApiResponse (Classification)</returns>
        System.Threading.Tasks.Task<ApiResponse<Classification>> UpdateClassificationAsyncWithHttpInfo (string key, UpdateClassificationRequest updateClassificationRequest, string xHiarcUserKey = default(string));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IClassificationApi : IClassificationApiSync, IClassificationApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ClassificationApi : IClassificationApi
    {
        private HiarcSDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ClassificationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ClassificationApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClassificationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ClassificationApi(String basePath)
        {
            this.Configuration = HiarcSDK.Client.Configuration.MergeConfigurations(
                HiarcSDK.Client.GlobalConfiguration.Instance,
                new HiarcSDK.Client.Configuration { BasePath = basePath }
            );
            this.Client = new HiarcSDK.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HiarcSDK.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = HiarcSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClassificationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ClassificationApi(HiarcSDK.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = HiarcSDK.Client.Configuration.MergeConfigurations(
                HiarcSDK.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new HiarcSDK.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HiarcSDK.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = HiarcSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClassificationApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ClassificationApi(HiarcSDK.Client.ISynchronousClient client,HiarcSDK.Client.IAsynchronousClient asyncClient, HiarcSDK.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = HiarcSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public HiarcSDK.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public HiarcSDK.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public HiarcSDK.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public HiarcSDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a Classification 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createClassificationRequest">Classification information</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Classification</returns>
        public Classification CreateClassification (CreateClassificationRequest createClassificationRequest, string xHiarcUserKey = default(string))
        {
             HiarcSDK.Client.ApiResponse<Classification> localVarResponse = CreateClassificationWithHttpInfo(createClassificationRequest, xHiarcUserKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Classification 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createClassificationRequest">Classification information</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>ApiResponse of Classification</returns>
        public HiarcSDK.Client.ApiResponse< Classification > CreateClassificationWithHttpInfo (CreateClassificationRequest createClassificationRequest, string xHiarcUserKey = default(string))
        {
            // verify the required parameter 'createClassificationRequest' is set
            if (createClassificationRequest == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'createClassificationRequest' when calling ClassificationApi->CreateClassification");

            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = HiarcSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HiarcSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xHiarcUserKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-User-Key", HiarcSDK.Client.ClientUtils.ParameterToString(xHiarcUserKey)); // header parameter
            }
            localVarRequestOptions.Data = createClassificationRequest;

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Classification >("/classifications", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateClassification", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Classification 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createClassificationRequest">Classification information</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of Classification</returns>
        public async System.Threading.Tasks.Task<Classification> CreateClassificationAsync (CreateClassificationRequest createClassificationRequest, string xHiarcUserKey = default(string))
        {
             HiarcSDK.Client.ApiResponse<Classification> localVarResponse = await CreateClassificationAsyncWithHttpInfo(createClassificationRequest, xHiarcUserKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a Classification 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createClassificationRequest">Classification information</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of ApiResponse (Classification)</returns>
        public async System.Threading.Tasks.Task<HiarcSDK.Client.ApiResponse<Classification>> CreateClassificationAsyncWithHttpInfo (CreateClassificationRequest createClassificationRequest, string xHiarcUserKey = default(string))
        {
            // verify the required parameter 'createClassificationRequest' is set
            if (createClassificationRequest == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'createClassificationRequest' when calling ClassificationApi->CreateClassification");


            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (xHiarcUserKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-User-Key", HiarcSDK.Client.ClientUtils.ParameterToString(xHiarcUserKey)); // header parameter
            }
            localVarRequestOptions.Data = createClassificationRequest;

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Classification>("/classifications", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateClassification", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Classification 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Classification to delete</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Object</returns>
        public Object DeleteClassification (string key, string xHiarcUserKey = default(string))
        {
             HiarcSDK.Client.ApiResponse<Object> localVarResponse = DeleteClassificationWithHttpInfo(key, xHiarcUserKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a Classification 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Classification to delete</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public HiarcSDK.Client.ApiResponse< Object > DeleteClassificationWithHttpInfo (string key, string xHiarcUserKey = default(string))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'key' when calling ClassificationApi->DeleteClassification");

            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = HiarcSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HiarcSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", HiarcSDK.Client.ClientUtils.ParameterToString(key)); // path parameter
            if (xHiarcUserKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-User-Key", HiarcSDK.Client.ClientUtils.ParameterToString(xHiarcUserKey)); // header parameter
            }

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete< Object >("/classifications/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteClassification", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Classification 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Classification to delete</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteClassificationAsync (string key, string xHiarcUserKey = default(string))
        {
             HiarcSDK.Client.ApiResponse<Object> localVarResponse = await DeleteClassificationAsyncWithHttpInfo(key, xHiarcUserKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a Classification 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Classification to delete</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<HiarcSDK.Client.ApiResponse<Object>> DeleteClassificationAsyncWithHttpInfo (string key, string xHiarcUserKey = default(string))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'key' when calling ClassificationApi->DeleteClassification");


            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("key", HiarcSDK.Client.ClientUtils.ParameterToString(key)); // path parameter
            if (xHiarcUserKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-User-Key", HiarcSDK.Client.ClientUtils.ParameterToString(xHiarcUserKey)); // header parameter
            }

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/classifications/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteClassification", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find a Classification 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findClassificationsRequest">Classification query</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>List&lt;Classification&gt;</returns>
        public List<Classification> FindClassification (FindClassificationsRequest findClassificationsRequest, string xHiarcUserKey = default(string))
        {
             HiarcSDK.Client.ApiResponse<List<Classification>> localVarResponse = FindClassificationWithHttpInfo(findClassificationsRequest, xHiarcUserKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find a Classification 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findClassificationsRequest">Classification query</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>ApiResponse of List&lt;Classification&gt;</returns>
        public HiarcSDK.Client.ApiResponse< List<Classification> > FindClassificationWithHttpInfo (FindClassificationsRequest findClassificationsRequest, string xHiarcUserKey = default(string))
        {
            // verify the required parameter 'findClassificationsRequest' is set
            if (findClassificationsRequest == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'findClassificationsRequest' when calling ClassificationApi->FindClassification");

            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = HiarcSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HiarcSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xHiarcUserKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-User-Key", HiarcSDK.Client.ClientUtils.ParameterToString(xHiarcUserKey)); // header parameter
            }
            localVarRequestOptions.Data = findClassificationsRequest;

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< List<Classification> >("/classifications/find", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindClassification", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find a Classification 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findClassificationsRequest">Classification query</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of List&lt;Classification&gt;</returns>
        public async System.Threading.Tasks.Task<List<Classification>> FindClassificationAsync (FindClassificationsRequest findClassificationsRequest, string xHiarcUserKey = default(string))
        {
             HiarcSDK.Client.ApiResponse<List<Classification>> localVarResponse = await FindClassificationAsyncWithHttpInfo(findClassificationsRequest, xHiarcUserKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find a Classification 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findClassificationsRequest">Classification query</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Classification&gt;)</returns>
        public async System.Threading.Tasks.Task<HiarcSDK.Client.ApiResponse<List<Classification>>> FindClassificationAsyncWithHttpInfo (FindClassificationsRequest findClassificationsRequest, string xHiarcUserKey = default(string))
        {
            // verify the required parameter 'findClassificationsRequest' is set
            if (findClassificationsRequest == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'findClassificationsRequest' when calling ClassificationApi->FindClassification");


            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (xHiarcUserKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-User-Key", HiarcSDK.Client.ClientUtils.ParameterToString(xHiarcUserKey)); // header parameter
            }
            localVarRequestOptions.Data = findClassificationsRequest;

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<Classification>>("/classifications/find", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindClassification", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all Classifications 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>List&lt;Classification&gt;</returns>
        public List<Classification> GetAllClassifications (string xHiarcUserKey = default(string))
        {
             HiarcSDK.Client.ApiResponse<List<Classification>> localVarResponse = GetAllClassificationsWithHttpInfo(xHiarcUserKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all Classifications 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>ApiResponse of List&lt;Classification&gt;</returns>
        public HiarcSDK.Client.ApiResponse< List<Classification> > GetAllClassificationsWithHttpInfo (string xHiarcUserKey = default(string))
        {
            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = HiarcSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HiarcSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xHiarcUserKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-User-Key", HiarcSDK.Client.ClientUtils.ParameterToString(xHiarcUserKey)); // header parameter
            }

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Classification> >("/classifications", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllClassifications", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all Classifications 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of List&lt;Classification&gt;</returns>
        public async System.Threading.Tasks.Task<List<Classification>> GetAllClassificationsAsync (string xHiarcUserKey = default(string))
        {
             HiarcSDK.Client.ApiResponse<List<Classification>> localVarResponse = await GetAllClassificationsAsyncWithHttpInfo(xHiarcUserKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all Classifications 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Classification&gt;)</returns>
        public async System.Threading.Tasks.Task<HiarcSDK.Client.ApiResponse<List<Classification>>> GetAllClassificationsAsyncWithHttpInfo (string xHiarcUserKey = default(string))
        {

            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (xHiarcUserKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-User-Key", HiarcSDK.Client.ClientUtils.ParameterToString(xHiarcUserKey)); // header parameter
            }

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Classification>>("/classifications", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllClassifications", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Classification&#39;s Info 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Classification to get info</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Classification</returns>
        public Classification GetClassification (string key, string xHiarcUserKey = default(string))
        {
             HiarcSDK.Client.ApiResponse<Classification> localVarResponse = GetClassificationWithHttpInfo(key, xHiarcUserKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Classification&#39;s Info 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Classification to get info</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>ApiResponse of Classification</returns>
        public HiarcSDK.Client.ApiResponse< Classification > GetClassificationWithHttpInfo (string key, string xHiarcUserKey = default(string))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'key' when calling ClassificationApi->GetClassification");

            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = HiarcSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HiarcSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", HiarcSDK.Client.ClientUtils.ParameterToString(key)); // path parameter
            if (xHiarcUserKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-User-Key", HiarcSDK.Client.ClientUtils.ParameterToString(xHiarcUserKey)); // header parameter
            }

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Classification >("/classifications/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetClassification", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Classification&#39;s Info 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Classification to get info</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of Classification</returns>
        public async System.Threading.Tasks.Task<Classification> GetClassificationAsync (string key, string xHiarcUserKey = default(string))
        {
             HiarcSDK.Client.ApiResponse<Classification> localVarResponse = await GetClassificationAsyncWithHttpInfo(key, xHiarcUserKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a Classification&#39;s Info 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Classification to get info</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of ApiResponse (Classification)</returns>
        public async System.Threading.Tasks.Task<HiarcSDK.Client.ApiResponse<Classification>> GetClassificationAsyncWithHttpInfo (string key, string xHiarcUserKey = default(string))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'key' when calling ClassificationApi->GetClassification");


            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("key", HiarcSDK.Client.ClientUtils.ParameterToString(key)); // path parameter
            if (xHiarcUserKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-User-Key", HiarcSDK.Client.ClientUtils.ParameterToString(xHiarcUserKey)); // header parameter
            }

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Classification>("/classifications/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetClassification", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Classification 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Classification to get info</param>
        /// <param name="updateClassificationRequest">Classification information</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Classification</returns>
        public Classification UpdateClassification (string key, UpdateClassificationRequest updateClassificationRequest, string xHiarcUserKey = default(string))
        {
             HiarcSDK.Client.ApiResponse<Classification> localVarResponse = UpdateClassificationWithHttpInfo(key, updateClassificationRequest, xHiarcUserKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Classification 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Classification to get info</param>
        /// <param name="updateClassificationRequest">Classification information</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>ApiResponse of Classification</returns>
        public HiarcSDK.Client.ApiResponse< Classification > UpdateClassificationWithHttpInfo (string key, UpdateClassificationRequest updateClassificationRequest, string xHiarcUserKey = default(string))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'key' when calling ClassificationApi->UpdateClassification");

            // verify the required parameter 'updateClassificationRequest' is set
            if (updateClassificationRequest == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'updateClassificationRequest' when calling ClassificationApi->UpdateClassification");

            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = HiarcSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HiarcSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", HiarcSDK.Client.ClientUtils.ParameterToString(key)); // path parameter
            if (xHiarcUserKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-User-Key", HiarcSDK.Client.ClientUtils.ParameterToString(xHiarcUserKey)); // header parameter
            }
            localVarRequestOptions.Data = updateClassificationRequest;

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< Classification >("/classifications/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateClassification", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Classification 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Classification to get info</param>
        /// <param name="updateClassificationRequest">Classification information</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of Classification</returns>
        public async System.Threading.Tasks.Task<Classification> UpdateClassificationAsync (string key, UpdateClassificationRequest updateClassificationRequest, string xHiarcUserKey = default(string))
        {
             HiarcSDK.Client.ApiResponse<Classification> localVarResponse = await UpdateClassificationAsyncWithHttpInfo(key, updateClassificationRequest, xHiarcUserKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a Classification 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Classification to get info</param>
        /// <param name="updateClassificationRequest">Classification information</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of ApiResponse (Classification)</returns>
        public async System.Threading.Tasks.Task<HiarcSDK.Client.ApiResponse<Classification>> UpdateClassificationAsyncWithHttpInfo (string key, UpdateClassificationRequest updateClassificationRequest, string xHiarcUserKey = default(string))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'key' when calling ClassificationApi->UpdateClassification");

            // verify the required parameter 'updateClassificationRequest' is set
            if (updateClassificationRequest == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'updateClassificationRequest' when calling ClassificationApi->UpdateClassification");


            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("key", HiarcSDK.Client.ClientUtils.ParameterToString(key)); // path parameter
            if (xHiarcUserKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-User-Key", HiarcSDK.Client.ClientUtils.ParameterToString(xHiarcUserKey)); // header parameter
            }
            localVarRequestOptions.Data = updateClassificationRequest;

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Classification>("/classifications/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateClassification", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
