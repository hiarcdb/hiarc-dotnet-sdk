/* 
 * Hiarc API
 *
 * Welcome to the Hiarc API documentation.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using HiarcSDK.Client;
using HiarcSDK.Model;

namespace HiarcSDK.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGroupApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a User to a Group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Group</param>
        /// <param name="userKey">Key of User to add to Group</param>
        /// <returns>Object</returns>
        Object AddUserToGroup (string key, string userKey);

        /// <summary>
        /// Add a User to a Group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Group</param>
        /// <param name="userKey">Key of User to add to Group</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AddUserToGroupWithHttpInfo (string key, string userKey);
        /// <summary>
        /// Create a Group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createGroupRequest">Group information</param>
        /// <returns>Group</returns>
        Group CreateGroup (CreateGroupRequest createGroupRequest);

        /// <summary>
        /// Create a Group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createGroupRequest">Group information</param>
        /// <returns>ApiResponse of Group</returns>
        ApiResponse<Group> CreateGroupWithHttpInfo (CreateGroupRequest createGroupRequest);
        /// <summary>
        /// Delete a Group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Group to delete</param>
        /// <returns>Object</returns>
        Object DeleteGroup (string key);

        /// <summary>
        /// Delete a Group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Group to delete</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteGroupWithHttpInfo (string key);
        /// <summary>
        /// Find a Group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findGroupsRequest">Group query</param>
        /// <returns>List&lt;Group&gt;</returns>
        List<Group> FindGroup (FindGroupsRequest findGroupsRequest);

        /// <summary>
        /// Find a Group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findGroupsRequest">Group query</param>
        /// <returns>ApiResponse of List&lt;Group&gt;</returns>
        ApiResponse<List<Group>> FindGroupWithHttpInfo (FindGroupsRequest findGroupsRequest);
        /// <summary>
        /// Get all Groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Group&gt;</returns>
        List<Group> GetAllGroups ();

        /// <summary>
        /// Get all Groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Group&gt;</returns>
        ApiResponse<List<Group>> GetAllGroupsWithHttpInfo ();
        /// <summary>
        /// Get a Group&#39;s Info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Group to get info</param>
        /// <returns>Group</returns>
        Group GetGroup (string key);

        /// <summary>
        /// Get a Group&#39;s Info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Group to get info</param>
        /// <returns>ApiResponse of Group</returns>
        ApiResponse<Group> GetGroupWithHttpInfo (string key);
        /// <summary>
        /// Get the Groups for the current User
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xHiarcUserKey"> (optional)</param>
        /// <returns>List&lt;Group&gt;</returns>
        List<Group> GetGroupsForCurrentUser (string xHiarcUserKey = default(string));

        /// <summary>
        /// Get the Groups for the current User
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xHiarcUserKey"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Group&gt;</returns>
        ApiResponse<List<Group>> GetGroupsForCurrentUserWithHttpInfo (string xHiarcUserKey = default(string));
        /// <summary>
        /// Update a Group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Group to update</param>
        /// <param name="updateGroupRequest">Group information</param>
        /// <returns>Group</returns>
        Group UpdateGroup (string key, UpdateGroupRequest updateGroupRequest);

        /// <summary>
        /// Update a Group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Group to update</param>
        /// <param name="updateGroupRequest">Group information</param>
        /// <returns>ApiResponse of Group</returns>
        ApiResponse<Group> UpdateGroupWithHttpInfo (string key, UpdateGroupRequest updateGroupRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGroupApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add a User to a Group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Group</param>
        /// <param name="userKey">Key of User to add to Group</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AddUserToGroupAsync (string key, string userKey);

        /// <summary>
        /// Add a User to a Group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Group</param>
        /// <param name="userKey">Key of User to add to Group</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddUserToGroupAsyncWithHttpInfo (string key, string userKey);
        /// <summary>
        /// Create a Group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createGroupRequest">Group information</param>
        /// <returns>Task of Group</returns>
        System.Threading.Tasks.Task<Group> CreateGroupAsync (CreateGroupRequest createGroupRequest);

        /// <summary>
        /// Create a Group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createGroupRequest">Group information</param>
        /// <returns>Task of ApiResponse (Group)</returns>
        System.Threading.Tasks.Task<ApiResponse<Group>> CreateGroupAsyncWithHttpInfo (CreateGroupRequest createGroupRequest);
        /// <summary>
        /// Delete a Group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Group to delete</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteGroupAsync (string key);

        /// <summary>
        /// Delete a Group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Group to delete</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteGroupAsyncWithHttpInfo (string key);
        /// <summary>
        /// Find a Group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findGroupsRequest">Group query</param>
        /// <returns>Task of List&lt;Group&gt;</returns>
        System.Threading.Tasks.Task<List<Group>> FindGroupAsync (FindGroupsRequest findGroupsRequest);

        /// <summary>
        /// Find a Group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findGroupsRequest">Group query</param>
        /// <returns>Task of ApiResponse (List&lt;Group&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Group>>> FindGroupAsyncWithHttpInfo (FindGroupsRequest findGroupsRequest);
        /// <summary>
        /// Get all Groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Group&gt;</returns>
        System.Threading.Tasks.Task<List<Group>> GetAllGroupsAsync ();

        /// <summary>
        /// Get all Groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Group&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Group>>> GetAllGroupsAsyncWithHttpInfo ();
        /// <summary>
        /// Get a Group&#39;s Info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Group to get info</param>
        /// <returns>Task of Group</returns>
        System.Threading.Tasks.Task<Group> GetGroupAsync (string key);

        /// <summary>
        /// Get a Group&#39;s Info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Group to get info</param>
        /// <returns>Task of ApiResponse (Group)</returns>
        System.Threading.Tasks.Task<ApiResponse<Group>> GetGroupAsyncWithHttpInfo (string key);
        /// <summary>
        /// Get the Groups for the current User
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xHiarcUserKey"> (optional)</param>
        /// <returns>Task of List&lt;Group&gt;</returns>
        System.Threading.Tasks.Task<List<Group>> GetGroupsForCurrentUserAsync (string xHiarcUserKey = default(string));

        /// <summary>
        /// Get the Groups for the current User
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xHiarcUserKey"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Group&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Group>>> GetGroupsForCurrentUserAsyncWithHttpInfo (string xHiarcUserKey = default(string));
        /// <summary>
        /// Update a Group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Group to update</param>
        /// <param name="updateGroupRequest">Group information</param>
        /// <returns>Task of Group</returns>
        System.Threading.Tasks.Task<Group> UpdateGroupAsync (string key, UpdateGroupRequest updateGroupRequest);

        /// <summary>
        /// Update a Group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Group to update</param>
        /// <param name="updateGroupRequest">Group information</param>
        /// <returns>Task of ApiResponse (Group)</returns>
        System.Threading.Tasks.Task<ApiResponse<Group>> UpdateGroupAsyncWithHttpInfo (string key, UpdateGroupRequest updateGroupRequest);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGroupApi : IGroupApiSync, IGroupApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GroupApi : IGroupApi
    {
        private HiarcSDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GroupApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GroupApi(String basePath)
        {
            this.Configuration = HiarcSDK.Client.Configuration.MergeConfigurations(
                HiarcSDK.Client.GlobalConfiguration.Instance,
                new HiarcSDK.Client.Configuration { BasePath = basePath }
            );
            this.Client = new HiarcSDK.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HiarcSDK.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = HiarcSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GroupApi(HiarcSDK.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = HiarcSDK.Client.Configuration.MergeConfigurations(
                HiarcSDK.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new HiarcSDK.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HiarcSDK.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = HiarcSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public GroupApi(HiarcSDK.Client.ISynchronousClient client,HiarcSDK.Client.IAsynchronousClient asyncClient, HiarcSDK.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = HiarcSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public HiarcSDK.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public HiarcSDK.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public HiarcSDK.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public HiarcSDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add a User to a Group 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Group</param>
        /// <param name="userKey">Key of User to add to Group</param>
        /// <returns>Object</returns>
        public Object AddUserToGroup (string key, string userKey)
        {
             HiarcSDK.Client.ApiResponse<Object> localVarResponse = AddUserToGroupWithHttpInfo(key, userKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a User to a Group 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Group</param>
        /// <param name="userKey">Key of User to add to Group</param>
        /// <returns>ApiResponse of Object</returns>
        public HiarcSDK.Client.ApiResponse< Object > AddUserToGroupWithHttpInfo (string key, string userKey)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'key' when calling GroupApi->AddUserToGroup");

            // verify the required parameter 'userKey' is set
            if (userKey == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'userKey' when calling GroupApi->AddUserToGroup");

            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = HiarcSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HiarcSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", HiarcSDK.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.PathParameters.Add("userKey", HiarcSDK.Client.ClientUtils.ParameterToString(userKey)); // path parameter

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< Object >("/groups/{key}/users/{userKey}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddUserToGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a User to a Group 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Group</param>
        /// <param name="userKey">Key of User to add to Group</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AddUserToGroupAsync (string key, string userKey)
        {
             HiarcSDK.Client.ApiResponse<Object> localVarResponse = await AddUserToGroupAsyncWithHttpInfo(key, userKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a User to a Group 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Group</param>
        /// <param name="userKey">Key of User to add to Group</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<HiarcSDK.Client.ApiResponse<Object>> AddUserToGroupAsyncWithHttpInfo (string key, string userKey)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'key' when calling GroupApi->AddUserToGroup");

            // verify the required parameter 'userKey' is set
            if (userKey == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'userKey' when calling GroupApi->AddUserToGroup");


            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("key", HiarcSDK.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.PathParameters.Add("userKey", HiarcSDK.Client.ClientUtils.ParameterToString(userKey)); // path parameter

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/groups/{key}/users/{userKey}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddUserToGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Group 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createGroupRequest">Group information</param>
        /// <returns>Group</returns>
        public Group CreateGroup (CreateGroupRequest createGroupRequest)
        {
             HiarcSDK.Client.ApiResponse<Group> localVarResponse = CreateGroupWithHttpInfo(createGroupRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Group 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createGroupRequest">Group information</param>
        /// <returns>ApiResponse of Group</returns>
        public HiarcSDK.Client.ApiResponse< Group > CreateGroupWithHttpInfo (CreateGroupRequest createGroupRequest)
        {
            // verify the required parameter 'createGroupRequest' is set
            if (createGroupRequest == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'createGroupRequest' when calling GroupApi->CreateGroup");

            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = HiarcSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HiarcSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createGroupRequest;

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Group >("/groups", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Group 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createGroupRequest">Group information</param>
        /// <returns>Task of Group</returns>
        public async System.Threading.Tasks.Task<Group> CreateGroupAsync (CreateGroupRequest createGroupRequest)
        {
             HiarcSDK.Client.ApiResponse<Group> localVarResponse = await CreateGroupAsyncWithHttpInfo(createGroupRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a Group 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createGroupRequest">Group information</param>
        /// <returns>Task of ApiResponse (Group)</returns>
        public async System.Threading.Tasks.Task<HiarcSDK.Client.ApiResponse<Group>> CreateGroupAsyncWithHttpInfo (CreateGroupRequest createGroupRequest)
        {
            // verify the required parameter 'createGroupRequest' is set
            if (createGroupRequest == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'createGroupRequest' when calling GroupApi->CreateGroup");


            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = createGroupRequest;

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Group>("/groups", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Group 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Group to delete</param>
        /// <returns>Object</returns>
        public Object DeleteGroup (string key)
        {
             HiarcSDK.Client.ApiResponse<Object> localVarResponse = DeleteGroupWithHttpInfo(key);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a Group 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Group to delete</param>
        /// <returns>ApiResponse of Object</returns>
        public HiarcSDK.Client.ApiResponse< Object > DeleteGroupWithHttpInfo (string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'key' when calling GroupApi->DeleteGroup");

            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = HiarcSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HiarcSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", HiarcSDK.Client.ClientUtils.ParameterToString(key)); // path parameter

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete< Object >("/groups/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Group 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Group to delete</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteGroupAsync (string key)
        {
             HiarcSDK.Client.ApiResponse<Object> localVarResponse = await DeleteGroupAsyncWithHttpInfo(key);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a Group 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Group to delete</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<HiarcSDK.Client.ApiResponse<Object>> DeleteGroupAsyncWithHttpInfo (string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'key' when calling GroupApi->DeleteGroup");


            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("key", HiarcSDK.Client.ClientUtils.ParameterToString(key)); // path parameter

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/groups/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find a Group 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findGroupsRequest">Group query</param>
        /// <returns>List&lt;Group&gt;</returns>
        public List<Group> FindGroup (FindGroupsRequest findGroupsRequest)
        {
             HiarcSDK.Client.ApiResponse<List<Group>> localVarResponse = FindGroupWithHttpInfo(findGroupsRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find a Group 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findGroupsRequest">Group query</param>
        /// <returns>ApiResponse of List&lt;Group&gt;</returns>
        public HiarcSDK.Client.ApiResponse< List<Group> > FindGroupWithHttpInfo (FindGroupsRequest findGroupsRequest)
        {
            // verify the required parameter 'findGroupsRequest' is set
            if (findGroupsRequest == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'findGroupsRequest' when calling GroupApi->FindGroup");

            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = HiarcSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HiarcSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = findGroupsRequest;

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< List<Group> >("/groups/find", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find a Group 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findGroupsRequest">Group query</param>
        /// <returns>Task of List&lt;Group&gt;</returns>
        public async System.Threading.Tasks.Task<List<Group>> FindGroupAsync (FindGroupsRequest findGroupsRequest)
        {
             HiarcSDK.Client.ApiResponse<List<Group>> localVarResponse = await FindGroupAsyncWithHttpInfo(findGroupsRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find a Group 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findGroupsRequest">Group query</param>
        /// <returns>Task of ApiResponse (List&lt;Group&gt;)</returns>
        public async System.Threading.Tasks.Task<HiarcSDK.Client.ApiResponse<List<Group>>> FindGroupAsyncWithHttpInfo (FindGroupsRequest findGroupsRequest)
        {
            // verify the required parameter 'findGroupsRequest' is set
            if (findGroupsRequest == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'findGroupsRequest' when calling GroupApi->FindGroup");


            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = findGroupsRequest;

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<Group>>("/groups/find", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all Groups 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Group&gt;</returns>
        public List<Group> GetAllGroups ()
        {
             HiarcSDK.Client.ApiResponse<List<Group>> localVarResponse = GetAllGroupsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all Groups 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Group&gt;</returns>
        public HiarcSDK.Client.ApiResponse< List<Group> > GetAllGroupsWithHttpInfo ()
        {
            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = HiarcSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HiarcSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Group> >("/groups", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllGroups", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all Groups 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Group&gt;</returns>
        public async System.Threading.Tasks.Task<List<Group>> GetAllGroupsAsync ()
        {
             HiarcSDK.Client.ApiResponse<List<Group>> localVarResponse = await GetAllGroupsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all Groups 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Group&gt;)</returns>
        public async System.Threading.Tasks.Task<HiarcSDK.Client.ApiResponse<List<Group>>> GetAllGroupsAsyncWithHttpInfo ()
        {

            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Group>>("/groups", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllGroups", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Group&#39;s Info 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Group to get info</param>
        /// <returns>Group</returns>
        public Group GetGroup (string key)
        {
             HiarcSDK.Client.ApiResponse<Group> localVarResponse = GetGroupWithHttpInfo(key);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Group&#39;s Info 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Group to get info</param>
        /// <returns>ApiResponse of Group</returns>
        public HiarcSDK.Client.ApiResponse< Group > GetGroupWithHttpInfo (string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'key' when calling GroupApi->GetGroup");

            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = HiarcSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HiarcSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", HiarcSDK.Client.ClientUtils.ParameterToString(key)); // path parameter

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Group >("/groups/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Group&#39;s Info 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Group to get info</param>
        /// <returns>Task of Group</returns>
        public async System.Threading.Tasks.Task<Group> GetGroupAsync (string key)
        {
             HiarcSDK.Client.ApiResponse<Group> localVarResponse = await GetGroupAsyncWithHttpInfo(key);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a Group&#39;s Info 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Group to get info</param>
        /// <returns>Task of ApiResponse (Group)</returns>
        public async System.Threading.Tasks.Task<HiarcSDK.Client.ApiResponse<Group>> GetGroupAsyncWithHttpInfo (string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'key' when calling GroupApi->GetGroup");


            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("key", HiarcSDK.Client.ClientUtils.ParameterToString(key)); // path parameter

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Group>("/groups/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the Groups for the current User 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xHiarcUserKey"> (optional)</param>
        /// <returns>List&lt;Group&gt;</returns>
        public List<Group> GetGroupsForCurrentUser (string xHiarcUserKey = default(string))
        {
             HiarcSDK.Client.ApiResponse<List<Group>> localVarResponse = GetGroupsForCurrentUserWithHttpInfo(xHiarcUserKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the Groups for the current User 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xHiarcUserKey"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Group&gt;</returns>
        public HiarcSDK.Client.ApiResponse< List<Group> > GetGroupsForCurrentUserWithHttpInfo (string xHiarcUserKey = default(string))
        {
            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = HiarcSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HiarcSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xHiarcUserKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-User-Key", HiarcSDK.Client.ClientUtils.ParameterToString(xHiarcUserKey)); // header parameter
            }

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }
            // authentication (JWTBearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Group> >("/users/current/groups", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupsForCurrentUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the Groups for the current User 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xHiarcUserKey"> (optional)</param>
        /// <returns>Task of List&lt;Group&gt;</returns>
        public async System.Threading.Tasks.Task<List<Group>> GetGroupsForCurrentUserAsync (string xHiarcUserKey = default(string))
        {
             HiarcSDK.Client.ApiResponse<List<Group>> localVarResponse = await GetGroupsForCurrentUserAsyncWithHttpInfo(xHiarcUserKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the Groups for the current User 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xHiarcUserKey"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Group&gt;)</returns>
        public async System.Threading.Tasks.Task<HiarcSDK.Client.ApiResponse<List<Group>>> GetGroupsForCurrentUserAsyncWithHttpInfo (string xHiarcUserKey = default(string))
        {

            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (xHiarcUserKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-User-Key", HiarcSDK.Client.ClientUtils.ParameterToString(xHiarcUserKey)); // header parameter
            }

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }
            // authentication (JWTBearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Group>>("/users/current/groups", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupsForCurrentUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Group 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Group to update</param>
        /// <param name="updateGroupRequest">Group information</param>
        /// <returns>Group</returns>
        public Group UpdateGroup (string key, UpdateGroupRequest updateGroupRequest)
        {
             HiarcSDK.Client.ApiResponse<Group> localVarResponse = UpdateGroupWithHttpInfo(key, updateGroupRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Group 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Group to update</param>
        /// <param name="updateGroupRequest">Group information</param>
        /// <returns>ApiResponse of Group</returns>
        public HiarcSDK.Client.ApiResponse< Group > UpdateGroupWithHttpInfo (string key, UpdateGroupRequest updateGroupRequest)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'key' when calling GroupApi->UpdateGroup");

            // verify the required parameter 'updateGroupRequest' is set
            if (updateGroupRequest == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'updateGroupRequest' when calling GroupApi->UpdateGroup");

            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = HiarcSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HiarcSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", HiarcSDK.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.Data = updateGroupRequest;

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< Group >("/groups/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Group 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Group to update</param>
        /// <param name="updateGroupRequest">Group information</param>
        /// <returns>Task of Group</returns>
        public async System.Threading.Tasks.Task<Group> UpdateGroupAsync (string key, UpdateGroupRequest updateGroupRequest)
        {
             HiarcSDK.Client.ApiResponse<Group> localVarResponse = await UpdateGroupAsyncWithHttpInfo(key, updateGroupRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a Group 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Group to update</param>
        /// <param name="updateGroupRequest">Group information</param>
        /// <returns>Task of ApiResponse (Group)</returns>
        public async System.Threading.Tasks.Task<HiarcSDK.Client.ApiResponse<Group>> UpdateGroupAsyncWithHttpInfo (string key, UpdateGroupRequest updateGroupRequest)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'key' when calling GroupApi->UpdateGroup");

            // verify the required parameter 'updateGroupRequest' is set
            if (updateGroupRequest == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'updateGroupRequest' when calling GroupApi->UpdateGroup");


            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("key", HiarcSDK.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.Data = updateGroupRequest;

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Group>("/groups/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
