/* 
 * Hiarc API
 *
 * Welcome to the Hiarc API documentation.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using HiarcSDK.Client;
using HiarcSDK.Model;

namespace HiarcSDK.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFileApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a Classification to a File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file</param>
        /// <param name="addClassificationToFileRequest">Classification information</param>
        /// <param name="xHiarcUserKey"> (optional)</param>
        /// <returns>Object</returns>
        Object AddClassificationToFile(string key, AddClassificationToFileRequest addClassificationToFileRequest, string xHiarcUserKey = default(string));

        /// <summary>
        /// Add a Classification to a File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file</param>
        /// <param name="addClassificationToFileRequest">Classification information</param>
        /// <param name="xHiarcUserKey"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AddClassificationToFileWithHttpInfo(string key, AddClassificationToFileRequest addClassificationToFileRequest, string xHiarcUserKey = default(string));
        /// <summary>
        /// Give a group access to a File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file</param>
        /// <param name="addGroupToFileRequest">Group information</param>
        /// <param name="xHiarcUserKey"> (optional)</param>
        /// <returns>Object</returns>
        Object AddGroupToFile(string key, AddGroupToFileRequest addGroupToFileRequest, string xHiarcUserKey = default(string));

        /// <summary>
        /// Give a group access to a File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file</param>
        /// <param name="addGroupToFileRequest">Group information</param>
        /// <param name="xHiarcUserKey"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AddGroupToFileWithHttpInfo(string key, AddGroupToFileRequest addGroupToFileRequest, string xHiarcUserKey = default(string));
        /// <summary>
        /// Add a Retention Policy to a File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file</param>
        /// <param name="addRetentionPolicyToFileRequest">Retention Policy information</param>
        /// <param name="xHiarcUserKey"> (optional)</param>
        /// <returns>Object</returns>
        Object AddRetentionPolicyToFile(string key, AddRetentionPolicyToFileRequest addRetentionPolicyToFileRequest, string xHiarcUserKey = default(string));

        /// <summary>
        /// Add a Retention Policy to a File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file</param>
        /// <param name="addRetentionPolicyToFileRequest">Retention Policy information</param>
        /// <param name="xHiarcUserKey"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AddRetentionPolicyToFileWithHttpInfo(string key, AddRetentionPolicyToFileRequest addRetentionPolicyToFileRequest, string xHiarcUserKey = default(string));
        /// <summary>
        /// Give a user access to a File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file</param>
        /// <param name="addUserToFileRequest">User information</param>
        /// <param name="xHiarcUserKey"> (optional)</param>
        /// <returns>Object</returns>
        Object AddUserToFile(string key, AddUserToFileRequest addUserToFileRequest, string xHiarcUserKey = default(string));

        /// <summary>
        /// Give a user access to a File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file</param>
        /// <param name="addUserToFileRequest">User information</param>
        /// <param name="xHiarcUserKey"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AddUserToFileWithHttpInfo(string key, AddUserToFileRequest addUserToFileRequest, string xHiarcUserKey = default(string));
        /// <summary>
        /// Add a new File Version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to add a version</param>
        /// <param name="xHiarcUserKey"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <returns>File</returns>
        File AddVersion(string key, AddVersionToFileRequest request, System.IO.Stream file, string xHiarcUserKey = default(string));

        /// <summary>
        /// Add a new File Version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to add a version</param>
        /// <param name="xHiarcUserKey"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <returns>ApiResponse of File</returns>
        ApiResponse<File> AddVersionWithHttpInfo(string key, AddVersionToFileRequest request, System.IO.Stream file, string xHiarcUserKey = default(string));
        /// <summary>
        /// Attach to an existing File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to attach to</param>
        /// <param name="attachToExistingFileRequest">File information</param>
        /// <param name="xHiarcUserKey"> (optional)</param>
        /// <returns>File</returns>
        File AttachToExisitingFile(string key, AttachToExistingFileRequest attachToExistingFileRequest, string xHiarcUserKey = default(string));

        /// <summary>
        /// Attach to an existing File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to attach to</param>
        /// <param name="attachToExistingFileRequest">File information</param>
        /// <param name="xHiarcUserKey"> (optional)</param>
        /// <returns>ApiResponse of File</returns>
        ApiResponse<File> AttachToExisitingFileWithHttpInfo(string key, AttachToExistingFileRequest attachToExistingFileRequest, string xHiarcUserKey = default(string));
        /// <summary>
        /// Copy a File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to attach to</param>
        /// <param name="copyFileRequest">File information</param>
        /// <param name="xHiarcUserKey"> (optional)</param>
        /// <returns>File</returns>
        File CopyFile(string key, CopyFileRequest copyFileRequest, string xHiarcUserKey = default(string));

        /// <summary>
        /// Copy a File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to attach to</param>
        /// <param name="copyFileRequest">File information</param>
        /// <param name="xHiarcUserKey"> (optional)</param>
        /// <returns>ApiResponse of File</returns>
        ApiResponse<File> CopyFileWithHttpInfo(string key, CopyFileRequest copyFileRequest, string xHiarcUserKey = default(string));
        /// <summary>
        /// Create a direct upload url to a storage service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDirectUploadUrlRequest">Storage service information</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <param name="expiresInSeconds">When access to the url should expire (optional)</param>
        /// <returns>FileDirectUpload</returns>
        FileDirectUpload CreateDirectUploadUrl(CreateDirectUploadUrlRequest createDirectUploadUrlRequest, string xHiarcUserKey = default(string), int? expiresInSeconds = default(int?));

        /// <summary>
        /// Create a direct upload url to a storage service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDirectUploadUrlRequest">Storage service information</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <param name="expiresInSeconds">When access to the url should expire (optional)</param>
        /// <returns>ApiResponse of FileDirectUpload</returns>
        ApiResponse<FileDirectUpload> CreateDirectUploadUrlWithHttpInfo(CreateDirectUploadUrlRequest createDirectUploadUrlRequest, string xHiarcUserKey = default(string), int? expiresInSeconds = default(int?));
        /// <summary>
        /// Create a File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xHiarcUserKey"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <returns>File</returns>
        File CreateFile(CreateFileRequest request, System.IO.Stream file, string xHiarcUserKey = default(string));

        /// <summary>
        /// Create a File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xHiarcUserKey"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <returns>ApiResponse of File</returns>
        ApiResponse<File> CreateFileWithHttpInfo(CreateFileRequest request, System.IO.Stream file, string xHiarcUserKey = default(string));
        /// <summary>
        /// Delete a File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to delete</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Object</returns>
        Object DeleteFile(string key, string xHiarcUserKey = default(string));

        /// <summary>
        /// Delete a File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to delete</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteFileWithHttpInfo(string key, string xHiarcUserKey = default(string));
        /// <summary>
        /// Download a File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to download</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream DownloadFile(string key, string xHiarcUserKey = default(string));

        /// <summary>
        /// Download a File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to download</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        System.IO.Stream DownloadFileWithHttpInfo(string key, string xHiarcUserKey = default(string));
        /// <summary>
        /// Get a list of Collections for a File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to get all collections</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>List&lt;Collection&gt;</returns>
        List<Collection> GetCollectionsForFile(string key, string xHiarcUserKey = default(string));

        /// <summary>
        /// Get a list of Collections for a File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to get all collections</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>ApiResponse of List&lt;Collection&gt;</returns>
        ApiResponse<List<Collection>> GetCollectionsForFileWithHttpInfo(string key, string xHiarcUserKey = default(string));
        /// <summary>
        /// Get a direct download URL to a File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to get download URL</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <param name="expiresInSeconds">When access to the url should expire (optional)</param>
        /// <returns>FileDirectDownload</returns>
        FileDirectDownload GetDirectDownloadUrl(string key, string xHiarcUserKey = default(string), int? expiresInSeconds = default(int?));

        /// <summary>
        /// Get a direct download URL to a File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to get download URL</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <param name="expiresInSeconds">When access to the url should expire (optional)</param>
        /// <returns>ApiResponse of FileDirectDownload</returns>
        ApiResponse<FileDirectDownload> GetDirectDownloadUrlWithHttpInfo(string key, string xHiarcUserKey = default(string), int? expiresInSeconds = default(int?));
        /// <summary>
        /// Get a File&#39;s Info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to get info</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>File</returns>
        File GetFile(string key, string xHiarcUserKey = default(string));

        /// <summary>
        /// Get a File&#39;s Info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to get info</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>ApiResponse of File</returns>
        ApiResponse<File> GetFileWithHttpInfo(string key, string xHiarcUserKey = default(string));
        /// <summary>
        /// Get a list of Retention Policies on a File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to get all retention policies</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>List&lt;RetentionPolicyApplication&gt;</returns>
        List<RetentionPolicyApplication> GetRetentionPolicies(string key, string xHiarcUserKey = default(string));

        /// <summary>
        /// Get a list of Retention Policies on a File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to get all retention policies</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>ApiResponse of List&lt;RetentionPolicyApplication&gt;</returns>
        ApiResponse<List<RetentionPolicyApplication>> GetRetentionPoliciesWithHttpInfo(string key, string xHiarcUserKey = default(string));
        /// <summary>
        /// Get a list of File Versions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to get all versions</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>List&lt;FileVersion&gt;</returns>
        List<FileVersion> GetVersions(string key, string xHiarcUserKey = default(string));

        /// <summary>
        /// Get a list of File Versions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to get all versions</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>ApiResponse of List&lt;FileVersion&gt;</returns>
        ApiResponse<List<FileVersion>> GetVersionsWithHttpInfo(string key, string xHiarcUserKey = default(string));
        /// <summary>
        /// Update a File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to update</param>
        /// <param name="updateFileRequest">File information</param>
        /// <returns>File</returns>
        File UpdateFile(string key, UpdateFileRequest updateFileRequest);

        /// <summary>
        /// Update a File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to update</param>
        /// <param name="updateFileRequest">File information</param>
        /// <returns>ApiResponse of File</returns>
        ApiResponse<File> UpdateFileWithHttpInfo(string key, UpdateFileRequest updateFileRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFileApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add a Classification to a File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file</param>
        /// <param name="addClassificationToFileRequest">Classification information</param>
        /// <param name="xHiarcUserKey"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AddClassificationToFileAsync(string key, AddClassificationToFileRequest addClassificationToFileRequest, string xHiarcUserKey = default(string));

        /// <summary>
        /// Add a Classification to a File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file</param>
        /// <param name="addClassificationToFileRequest">Classification information</param>
        /// <param name="xHiarcUserKey"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddClassificationToFileAsyncWithHttpInfo(string key, AddClassificationToFileRequest addClassificationToFileRequest, string xHiarcUserKey = default(string));
        /// <summary>
        /// Give a group access to a File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file</param>
        /// <param name="addGroupToFileRequest">Group information</param>
        /// <param name="xHiarcUserKey"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AddGroupToFileAsync(string key, AddGroupToFileRequest addGroupToFileRequest, string xHiarcUserKey = default(string));

        /// <summary>
        /// Give a group access to a File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file</param>
        /// <param name="addGroupToFileRequest">Group information</param>
        /// <param name="xHiarcUserKey"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddGroupToFileAsyncWithHttpInfo(string key, AddGroupToFileRequest addGroupToFileRequest, string xHiarcUserKey = default(string));
        /// <summary>
        /// Add a Retention Policy to a File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file</param>
        /// <param name="addRetentionPolicyToFileRequest">Retention Policy information</param>
        /// <param name="xHiarcUserKey"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AddRetentionPolicyToFileAsync(string key, AddRetentionPolicyToFileRequest addRetentionPolicyToFileRequest, string xHiarcUserKey = default(string));

        /// <summary>
        /// Add a Retention Policy to a File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file</param>
        /// <param name="addRetentionPolicyToFileRequest">Retention Policy information</param>
        /// <param name="xHiarcUserKey"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddRetentionPolicyToFileAsyncWithHttpInfo(string key, AddRetentionPolicyToFileRequest addRetentionPolicyToFileRequest, string xHiarcUserKey = default(string));
        /// <summary>
        /// Give a user access to a File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file</param>
        /// <param name="addUserToFileRequest">User information</param>
        /// <param name="xHiarcUserKey"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AddUserToFileAsync(string key, AddUserToFileRequest addUserToFileRequest, string xHiarcUserKey = default(string));

        /// <summary>
        /// Give a user access to a File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file</param>
        /// <param name="addUserToFileRequest">User information</param>
        /// <param name="xHiarcUserKey"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddUserToFileAsyncWithHttpInfo(string key, AddUserToFileRequest addUserToFileRequest, string xHiarcUserKey = default(string));
        /// <summary>
        /// Add a new File Version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to add a version</param>
        /// <param name="xHiarcUserKey"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <returns>Task of File</returns>
        System.Threading.Tasks.Task<File> AddVersionAsync(string key, AddVersionToFileRequest request, System.IO.Stream file, string xHiarcUserKey = default(string));

        /// <summary>
        /// Add a new File Version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to add a version</param>
        /// <param name="xHiarcUserKey"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <returns>Task of ApiResponse (File)</returns>
        System.Threading.Tasks.Task<ApiResponse<File>> AddVersionAsyncWithHttpInfo(string key, AddVersionToFileRequest request, System.IO.Stream file, string xHiarcUserKey = default(string));
        /// <summary>
        /// Attach to an existing File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to attach to</param>
        /// <param name="attachToExistingFileRequest">File information</param>
        /// <param name="xHiarcUserKey"> (optional)</param>
        /// <returns>Task of File</returns>
        System.Threading.Tasks.Task<File> AttachToExisitingFileAsync(string key, AttachToExistingFileRequest attachToExistingFileRequest, string xHiarcUserKey = default(string));

        /// <summary>
        /// Attach to an existing File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to attach to</param>
        /// <param name="attachToExistingFileRequest">File information</param>
        /// <param name="xHiarcUserKey"> (optional)</param>
        /// <returns>Task of ApiResponse (File)</returns>
        System.Threading.Tasks.Task<ApiResponse<File>> AttachToExisitingFileAsyncWithHttpInfo(string key, AttachToExistingFileRequest attachToExistingFileRequest, string xHiarcUserKey = default(string));
        /// <summary>
        /// Copy a File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to attach to</param>
        /// <param name="copyFileRequest">File information</param>
        /// <param name="xHiarcUserKey"> (optional)</param>
        /// <returns>Task of File</returns>
        System.Threading.Tasks.Task<File> CopyFileAsync(string key, CopyFileRequest copyFileRequest, string xHiarcUserKey = default(string));

        /// <summary>
        /// Copy a File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to attach to</param>
        /// <param name="copyFileRequest">File information</param>
        /// <param name="xHiarcUserKey"> (optional)</param>
        /// <returns>Task of ApiResponse (File)</returns>
        System.Threading.Tasks.Task<ApiResponse<File>> CopyFileAsyncWithHttpInfo(string key, CopyFileRequest copyFileRequest, string xHiarcUserKey = default(string));
        /// <summary>
        /// Create a direct upload url to a storage service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDirectUploadUrlRequest">Storage service information</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <param name="expiresInSeconds">When access to the url should expire (optional)</param>
        /// <returns>Task of FileDirectUpload</returns>
        System.Threading.Tasks.Task<FileDirectUpload> CreateDirectUploadUrlAsync(CreateDirectUploadUrlRequest createDirectUploadUrlRequest, string xHiarcUserKey = default(string), int? expiresInSeconds = default(int?));

        /// <summary>
        /// Create a direct upload url to a storage service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDirectUploadUrlRequest">Storage service information</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <param name="expiresInSeconds">When access to the url should expire (optional)</param>
        /// <returns>Task of ApiResponse (FileDirectUpload)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileDirectUpload>> CreateDirectUploadUrlAsyncWithHttpInfo(CreateDirectUploadUrlRequest createDirectUploadUrlRequest, string xHiarcUserKey = default(string), int? expiresInSeconds = default(int?));
        /// <summary>
        /// Create a File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xHiarcUserKey"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <returns>Task of File</returns>
        System.Threading.Tasks.Task<File> CreateFileAsync(CreateFileRequest request, System.IO.Stream file, string xHiarcUserKey = default(string));

        /// <summary>
        /// Create a File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xHiarcUserKey"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <returns>Task of ApiResponse (File)</returns>
        System.Threading.Tasks.Task<ApiResponse<File>> CreateFileAsyncWithHttpInfo(CreateFileRequest request, System.IO.Stream file, string xHiarcUserKey = default(string));
        /// <summary>
        /// Delete a File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to delete</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteFileAsync(string key, string xHiarcUserKey = default(string));

        /// <summary>
        /// Delete a File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to delete</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFileAsyncWithHttpInfo(string key, string xHiarcUserKey = default(string));
        /// <summary>
        /// Download a File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to download</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> DownloadFileAsync(string key, string xHiarcUserKey = default(string));

        /// <summary>
        /// Download a File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to download</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<System.IO.Stream> DownloadFileAsyncWithHttpInfo(string key, string xHiarcUserKey = default(string));
        /// <summary>
        /// Get a list of Collections for a File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to get all collections</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of List&lt;Collection&gt;</returns>
        System.Threading.Tasks.Task<List<Collection>> GetCollectionsForFileAsync(string key, string xHiarcUserKey = default(string));

        /// <summary>
        /// Get a list of Collections for a File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to get all collections</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Collection&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Collection>>> GetCollectionsForFileAsyncWithHttpInfo(string key, string xHiarcUserKey = default(string));
        /// <summary>
        /// Get a direct download URL to a File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to get download URL</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <param name="expiresInSeconds">When access to the url should expire (optional)</param>
        /// <returns>Task of FileDirectDownload</returns>
        System.Threading.Tasks.Task<FileDirectDownload> GetDirectDownloadUrlAsync(string key, string xHiarcUserKey = default(string), int? expiresInSeconds = default(int?));

        /// <summary>
        /// Get a direct download URL to a File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to get download URL</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <param name="expiresInSeconds">When access to the url should expire (optional)</param>
        /// <returns>Task of ApiResponse (FileDirectDownload)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileDirectDownload>> GetDirectDownloadUrlAsyncWithHttpInfo(string key, string xHiarcUserKey = default(string), int? expiresInSeconds = default(int?));
        /// <summary>
        /// Get a File&#39;s Info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to get info</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of File</returns>
        System.Threading.Tasks.Task<File> GetFileAsync(string key, string xHiarcUserKey = default(string));

        /// <summary>
        /// Get a File&#39;s Info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to get info</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of ApiResponse (File)</returns>
        System.Threading.Tasks.Task<ApiResponse<File>> GetFileAsyncWithHttpInfo(string key, string xHiarcUserKey = default(string));
        /// <summary>
        /// Get a list of Retention Policies on a File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to get all retention policies</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of List&lt;RetentionPolicyApplication&gt;</returns>
        System.Threading.Tasks.Task<List<RetentionPolicyApplication>> GetRetentionPoliciesAsync(string key, string xHiarcUserKey = default(string));

        /// <summary>
        /// Get a list of Retention Policies on a File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to get all retention policies</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;RetentionPolicyApplication&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RetentionPolicyApplication>>> GetRetentionPoliciesAsyncWithHttpInfo(string key, string xHiarcUserKey = default(string));
        /// <summary>
        /// Get a list of File Versions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to get all versions</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of List&lt;FileVersion&gt;</returns>
        System.Threading.Tasks.Task<List<FileVersion>> GetVersionsAsync(string key, string xHiarcUserKey = default(string));

        /// <summary>
        /// Get a list of File Versions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to get all versions</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;FileVersion&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FileVersion>>> GetVersionsAsyncWithHttpInfo(string key, string xHiarcUserKey = default(string));
        /// <summary>
        /// Update a File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to update</param>
        /// <param name="updateFileRequest">File information</param>
        /// <returns>Task of File</returns>
        System.Threading.Tasks.Task<File> UpdateFileAsync(string key, UpdateFileRequest updateFileRequest);

        /// <summary>
        /// Update a File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to update</param>
        /// <param name="updateFileRequest">File information</param>
        /// <returns>Task of ApiResponse (File)</returns>
        System.Threading.Tasks.Task<ApiResponse<File>> UpdateFileAsyncWithHttpInfo(string key, UpdateFileRequest updateFileRequest);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFileApi : IFileApiSync, IFileApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FileApi : IFileApi
    {
        private HiarcSDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FileApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FileApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FileApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FileApi(String basePath)
        {
            this.Configuration = HiarcSDK.Client.Configuration.MergeConfigurations(
                HiarcSDK.Client.GlobalConfiguration.Instance,
                new HiarcSDK.Client.Configuration { BasePath = basePath }
            );
            this.Client = new HiarcSDK.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HiarcSDK.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = HiarcSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FileApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FileApi(HiarcSDK.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = HiarcSDK.Client.Configuration.MergeConfigurations(
                HiarcSDK.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new HiarcSDK.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HiarcSDK.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = HiarcSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FileApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public FileApi(HiarcSDK.Client.ISynchronousClient client, HiarcSDK.Client.IAsynchronousClient asyncClient, HiarcSDK.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = HiarcSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public HiarcSDK.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public HiarcSDK.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public HiarcSDK.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public HiarcSDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add a Classification to a File 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file</param>
        /// <param name="addClassificationToFileRequest">Classification information</param>
        /// <param name="xHiarcUserKey"> (optional)</param>
        /// <returns>Object</returns>
        public Object AddClassificationToFile(string key, AddClassificationToFileRequest addClassificationToFileRequest, string xHiarcUserKey = default(string))
        {
            HiarcSDK.Client.ApiResponse<Object> localVarResponse = AddClassificationToFileWithHttpInfo(key, addClassificationToFileRequest, xHiarcUserKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a Classification to a File 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file</param>
        /// <param name="addClassificationToFileRequest">Classification information</param>
        /// <param name="xHiarcUserKey"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public HiarcSDK.Client.ApiResponse<Object> AddClassificationToFileWithHttpInfo(string key, AddClassificationToFileRequest addClassificationToFileRequest, string xHiarcUserKey = default(string))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'key' when calling FileApi->AddClassificationToFile");

            // verify the required parameter 'addClassificationToFileRequest' is set
            if (addClassificationToFileRequest == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'addClassificationToFileRequest' when calling FileApi->AddClassificationToFile");

            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = HiarcSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HiarcSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", HiarcSDK.Client.ClientUtils.ParameterToString(key)); // path parameter
            if (xHiarcUserKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-User-Key", HiarcSDK.Client.ClientUtils.ParameterToString(xHiarcUserKey)); // header parameter
            }
            localVarRequestOptions.Data = addClassificationToFileRequest;

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }
            // authentication (JWTBearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/files/{key}/classifications", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddClassificationToFile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a Classification to a File 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file</param>
        /// <param name="addClassificationToFileRequest">Classification information</param>
        /// <param name="xHiarcUserKey"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AddClassificationToFileAsync(string key, AddClassificationToFileRequest addClassificationToFileRequest, string xHiarcUserKey = default(string))
        {
            HiarcSDK.Client.ApiResponse<Object> localVarResponse = await AddClassificationToFileAsyncWithHttpInfo(key, addClassificationToFileRequest, xHiarcUserKey);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Add a Classification to a File 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file</param>
        /// <param name="addClassificationToFileRequest">Classification information</param>
        /// <param name="xHiarcUserKey"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<HiarcSDK.Client.ApiResponse<Object>> AddClassificationToFileAsyncWithHttpInfo(string key, AddClassificationToFileRequest addClassificationToFileRequest, string xHiarcUserKey = default(string))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'key' when calling FileApi->AddClassificationToFile");

            // verify the required parameter 'addClassificationToFileRequest' is set
            if (addClassificationToFileRequest == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'addClassificationToFileRequest' when calling FileApi->AddClassificationToFile");


            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("key", HiarcSDK.Client.ClientUtils.ParameterToString(key)); // path parameter
            if (xHiarcUserKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-User-Key", HiarcSDK.Client.ClientUtils.ParameterToString(xHiarcUserKey)); // header parameter
            }
            localVarRequestOptions.Data = addClassificationToFileRequest;

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }
            // authentication (JWTBearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/files/{key}/classifications", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddClassificationToFile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Give a group access to a File 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file</param>
        /// <param name="addGroupToFileRequest">Group information</param>
        /// <param name="xHiarcUserKey"> (optional)</param>
        /// <returns>Object</returns>
        public Object AddGroupToFile(string key, AddGroupToFileRequest addGroupToFileRequest, string xHiarcUserKey = default(string))
        {
            HiarcSDK.Client.ApiResponse<Object> localVarResponse = AddGroupToFileWithHttpInfo(key, addGroupToFileRequest, xHiarcUserKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Give a group access to a File 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file</param>
        /// <param name="addGroupToFileRequest">Group information</param>
        /// <param name="xHiarcUserKey"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public HiarcSDK.Client.ApiResponse<Object> AddGroupToFileWithHttpInfo(string key, AddGroupToFileRequest addGroupToFileRequest, string xHiarcUserKey = default(string))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'key' when calling FileApi->AddGroupToFile");

            // verify the required parameter 'addGroupToFileRequest' is set
            if (addGroupToFileRequest == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'addGroupToFileRequest' when calling FileApi->AddGroupToFile");

            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = HiarcSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HiarcSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", HiarcSDK.Client.ClientUtils.ParameterToString(key)); // path parameter
            if (xHiarcUserKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-User-Key", HiarcSDK.Client.ClientUtils.ParameterToString(xHiarcUserKey)); // header parameter
            }
            localVarRequestOptions.Data = addGroupToFileRequest;

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }
            // authentication (JWTBearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/files/{key}/groups", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddGroupToFile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Give a group access to a File 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file</param>
        /// <param name="addGroupToFileRequest">Group information</param>
        /// <param name="xHiarcUserKey"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AddGroupToFileAsync(string key, AddGroupToFileRequest addGroupToFileRequest, string xHiarcUserKey = default(string))
        {
            HiarcSDK.Client.ApiResponse<Object> localVarResponse = await AddGroupToFileAsyncWithHttpInfo(key, addGroupToFileRequest, xHiarcUserKey);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Give a group access to a File 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file</param>
        /// <param name="addGroupToFileRequest">Group information</param>
        /// <param name="xHiarcUserKey"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<HiarcSDK.Client.ApiResponse<Object>> AddGroupToFileAsyncWithHttpInfo(string key, AddGroupToFileRequest addGroupToFileRequest, string xHiarcUserKey = default(string))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'key' when calling FileApi->AddGroupToFile");

            // verify the required parameter 'addGroupToFileRequest' is set
            if (addGroupToFileRequest == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'addGroupToFileRequest' when calling FileApi->AddGroupToFile");


            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("key", HiarcSDK.Client.ClientUtils.ParameterToString(key)); // path parameter
            if (xHiarcUserKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-User-Key", HiarcSDK.Client.ClientUtils.ParameterToString(xHiarcUserKey)); // header parameter
            }
            localVarRequestOptions.Data = addGroupToFileRequest;

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }
            // authentication (JWTBearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/files/{key}/groups", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddGroupToFile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a Retention Policy to a File 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file</param>
        /// <param name="addRetentionPolicyToFileRequest">Retention Policy information</param>
        /// <param name="xHiarcUserKey"> (optional)</param>
        /// <returns>Object</returns>
        public Object AddRetentionPolicyToFile(string key, AddRetentionPolicyToFileRequest addRetentionPolicyToFileRequest, string xHiarcUserKey = default(string))
        {
            HiarcSDK.Client.ApiResponse<Object> localVarResponse = AddRetentionPolicyToFileWithHttpInfo(key, addRetentionPolicyToFileRequest, xHiarcUserKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a Retention Policy to a File 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file</param>
        /// <param name="addRetentionPolicyToFileRequest">Retention Policy information</param>
        /// <param name="xHiarcUserKey"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public HiarcSDK.Client.ApiResponse<Object> AddRetentionPolicyToFileWithHttpInfo(string key, AddRetentionPolicyToFileRequest addRetentionPolicyToFileRequest, string xHiarcUserKey = default(string))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'key' when calling FileApi->AddRetentionPolicyToFile");

            // verify the required parameter 'addRetentionPolicyToFileRequest' is set
            if (addRetentionPolicyToFileRequest == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'addRetentionPolicyToFileRequest' when calling FileApi->AddRetentionPolicyToFile");

            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = HiarcSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HiarcSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", HiarcSDK.Client.ClientUtils.ParameterToString(key)); // path parameter
            if (xHiarcUserKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-User-Key", HiarcSDK.Client.ClientUtils.ParameterToString(xHiarcUserKey)); // header parameter
            }
            localVarRequestOptions.Data = addRetentionPolicyToFileRequest;

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }
            // authentication (JWTBearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/files/{key}/retentionpolicies", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddRetentionPolicyToFile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a Retention Policy to a File 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file</param>
        /// <param name="addRetentionPolicyToFileRequest">Retention Policy information</param>
        /// <param name="xHiarcUserKey"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AddRetentionPolicyToFileAsync(string key, AddRetentionPolicyToFileRequest addRetentionPolicyToFileRequest, string xHiarcUserKey = default(string))
        {
            HiarcSDK.Client.ApiResponse<Object> localVarResponse = await AddRetentionPolicyToFileAsyncWithHttpInfo(key, addRetentionPolicyToFileRequest, xHiarcUserKey);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Add a Retention Policy to a File 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file</param>
        /// <param name="addRetentionPolicyToFileRequest">Retention Policy information</param>
        /// <param name="xHiarcUserKey"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<HiarcSDK.Client.ApiResponse<Object>> AddRetentionPolicyToFileAsyncWithHttpInfo(string key, AddRetentionPolicyToFileRequest addRetentionPolicyToFileRequest, string xHiarcUserKey = default(string))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'key' when calling FileApi->AddRetentionPolicyToFile");

            // verify the required parameter 'addRetentionPolicyToFileRequest' is set
            if (addRetentionPolicyToFileRequest == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'addRetentionPolicyToFileRequest' when calling FileApi->AddRetentionPolicyToFile");


            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("key", HiarcSDK.Client.ClientUtils.ParameterToString(key)); // path parameter
            if (xHiarcUserKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-User-Key", HiarcSDK.Client.ClientUtils.ParameterToString(xHiarcUserKey)); // header parameter
            }
            localVarRequestOptions.Data = addRetentionPolicyToFileRequest;

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }
            // authentication (JWTBearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/files/{key}/retentionpolicies", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddRetentionPolicyToFile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Give a user access to a File 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file</param>
        /// <param name="addUserToFileRequest">User information</param>
        /// <param name="xHiarcUserKey"> (optional)</param>
        /// <returns>Object</returns>
        public Object AddUserToFile(string key, AddUserToFileRequest addUserToFileRequest, string xHiarcUserKey = default(string))
        {
            HiarcSDK.Client.ApiResponse<Object> localVarResponse = AddUserToFileWithHttpInfo(key, addUserToFileRequest, xHiarcUserKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Give a user access to a File 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file</param>
        /// <param name="addUserToFileRequest">User information</param>
        /// <param name="xHiarcUserKey"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public HiarcSDK.Client.ApiResponse<Object> AddUserToFileWithHttpInfo(string key, AddUserToFileRequest addUserToFileRequest, string xHiarcUserKey = default(string))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'key' when calling FileApi->AddUserToFile");

            // verify the required parameter 'addUserToFileRequest' is set
            if (addUserToFileRequest == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'addUserToFileRequest' when calling FileApi->AddUserToFile");

            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = HiarcSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HiarcSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", HiarcSDK.Client.ClientUtils.ParameterToString(key)); // path parameter
            if (xHiarcUserKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-User-Key", HiarcSDK.Client.ClientUtils.ParameterToString(xHiarcUserKey)); // header parameter
            }
            localVarRequestOptions.Data = addUserToFileRequest;

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }
            // authentication (JWTBearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/files/{key}/users", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddUserToFile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Give a user access to a File 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file</param>
        /// <param name="addUserToFileRequest">User information</param>
        /// <param name="xHiarcUserKey"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AddUserToFileAsync(string key, AddUserToFileRequest addUserToFileRequest, string xHiarcUserKey = default(string))
        {
            HiarcSDK.Client.ApiResponse<Object> localVarResponse = await AddUserToFileAsyncWithHttpInfo(key, addUserToFileRequest, xHiarcUserKey);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Give a user access to a File 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file</param>
        /// <param name="addUserToFileRequest">User information</param>
        /// <param name="xHiarcUserKey"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<HiarcSDK.Client.ApiResponse<Object>> AddUserToFileAsyncWithHttpInfo(string key, AddUserToFileRequest addUserToFileRequest, string xHiarcUserKey = default(string))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'key' when calling FileApi->AddUserToFile");

            // verify the required parameter 'addUserToFileRequest' is set
            if (addUserToFileRequest == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'addUserToFileRequest' when calling FileApi->AddUserToFile");


            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("key", HiarcSDK.Client.ClientUtils.ParameterToString(key)); // path parameter
            if (xHiarcUserKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-User-Key", HiarcSDK.Client.ClientUtils.ParameterToString(xHiarcUserKey)); // header parameter
            }
            localVarRequestOptions.Data = addUserToFileRequest;

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }
            // authentication (JWTBearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/files/{key}/users", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddUserToFile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a new File Version 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to add a version</param>
        /// <param name="xHiarcUserKey"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <returns>File</returns>
        public File AddVersion(string key, AddVersionToFileRequest request, System.IO.Stream file, string xHiarcUserKey = default(string))
        {
            HiarcSDK.Client.ApiResponse<File> localVarResponse = AddVersionWithHttpInfo(key, request, file, xHiarcUserKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a new File Version 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to add a version</param>
        /// <param name="xHiarcUserKey"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <returns>ApiResponse of File</returns>
        public HiarcSDK.Client.ApiResponse<File> AddVersionWithHttpInfo(string key, AddVersionToFileRequest request, System.IO.Stream file, string xHiarcUserKey = default(string))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'key' when calling FileApi->AddVersion");

            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = HiarcSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HiarcSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", HiarcSDK.Client.ClientUtils.ParameterToString(key)); // path parameter
            if (xHiarcUserKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-User-Key", HiarcSDK.Client.ClientUtils.ParameterToString(xHiarcUserKey)); // header parameter
            }

            var jsonContent = ClientUtils.JsonContent(request);
            var jsonString = jsonContent.ReadAsStringAsync().Result;
            localVarRequestOptions.FormParameters.Add("request", jsonString);
            localVarRequestOptions.FileParameters.Add("file", file);

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }
            // authentication (JWTBearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<File>("/files/{key}/versions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddVersion", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a new File Version 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to add a version</param>
        /// <param name="xHiarcUserKey"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <returns>Task of File</returns>
        public async System.Threading.Tasks.Task<File> AddVersionAsync(string key, AddVersionToFileRequest request, System.IO.Stream file, string xHiarcUserKey = default(string))
        {
            HiarcSDK.Client.ApiResponse<File> localVarResponse = await AddVersionAsyncWithHttpInfo(key, request, file, xHiarcUserKey);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Add a new File Version 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to add a version</param>
        /// <param name="xHiarcUserKey"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <returns>Task of ApiResponse (File)</returns>
        public async System.Threading.Tasks.Task<HiarcSDK.Client.ApiResponse<File>> AddVersionAsyncWithHttpInfo(string key, AddVersionToFileRequest request, System.IO.Stream file, string xHiarcUserKey = default(string))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'key' when calling FileApi->AddVersion");


            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("key", HiarcSDK.Client.ClientUtils.ParameterToString(key)); // path parameter
            if (xHiarcUserKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-User-Key", HiarcSDK.Client.ClientUtils.ParameterToString(xHiarcUserKey)); // header parameter
            }
            var jsonContent = ClientUtils.JsonContent(request);
            var jsonString = jsonContent.ReadAsStringAsync().Result;
            localVarRequestOptions.FormParameters.Add("request", jsonString);
            localVarRequestOptions.FileParameters.Add("file", file);

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }
            // authentication (JWTBearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<File>("/files/{key}/versions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddVersion", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Attach to an existing File 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to attach to</param>
        /// <param name="attachToExistingFileRequest">File information</param>
        /// <param name="xHiarcUserKey"> (optional)</param>
        /// <returns>File</returns>
        public File AttachToExisitingFile(string key, AttachToExistingFileRequest attachToExistingFileRequest, string xHiarcUserKey = default(string))
        {
            HiarcSDK.Client.ApiResponse<File> localVarResponse = AttachToExisitingFileWithHttpInfo(key, attachToExistingFileRequest, xHiarcUserKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Attach to an existing File 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to attach to</param>
        /// <param name="attachToExistingFileRequest">File information</param>
        /// <param name="xHiarcUserKey"> (optional)</param>
        /// <returns>ApiResponse of File</returns>
        public HiarcSDK.Client.ApiResponse<File> AttachToExisitingFileWithHttpInfo(string key, AttachToExistingFileRequest attachToExistingFileRequest, string xHiarcUserKey = default(string))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'key' when calling FileApi->AttachToExisitingFile");

            // verify the required parameter 'attachToExistingFileRequest' is set
            if (attachToExistingFileRequest == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'attachToExistingFileRequest' when calling FileApi->AttachToExisitingFile");

            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = HiarcSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HiarcSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", HiarcSDK.Client.ClientUtils.ParameterToString(key)); // path parameter
            if (xHiarcUserKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-User-Key", HiarcSDK.Client.ClientUtils.ParameterToString(xHiarcUserKey)); // header parameter
            }
            localVarRequestOptions.Data = attachToExistingFileRequest;

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }
            // authentication (JWTBearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<File>("/files/{key}/attach", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AttachToExisitingFile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Attach to an existing File 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to attach to</param>
        /// <param name="attachToExistingFileRequest">File information</param>
        /// <param name="xHiarcUserKey"> (optional)</param>
        /// <returns>Task of File</returns>
        public async System.Threading.Tasks.Task<File> AttachToExisitingFileAsync(string key, AttachToExistingFileRequest attachToExistingFileRequest, string xHiarcUserKey = default(string))
        {
            HiarcSDK.Client.ApiResponse<File> localVarResponse = await AttachToExisitingFileAsyncWithHttpInfo(key, attachToExistingFileRequest, xHiarcUserKey);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Attach to an existing File 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to attach to</param>
        /// <param name="attachToExistingFileRequest">File information</param>
        /// <param name="xHiarcUserKey"> (optional)</param>
        /// <returns>Task of ApiResponse (File)</returns>
        public async System.Threading.Tasks.Task<HiarcSDK.Client.ApiResponse<File>> AttachToExisitingFileAsyncWithHttpInfo(string key, AttachToExistingFileRequest attachToExistingFileRequest, string xHiarcUserKey = default(string))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'key' when calling FileApi->AttachToExisitingFile");

            // verify the required parameter 'attachToExistingFileRequest' is set
            if (attachToExistingFileRequest == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'attachToExistingFileRequest' when calling FileApi->AttachToExisitingFile");


            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("key", HiarcSDK.Client.ClientUtils.ParameterToString(key)); // path parameter
            if (xHiarcUserKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-User-Key", HiarcSDK.Client.ClientUtils.ParameterToString(xHiarcUserKey)); // header parameter
            }
            localVarRequestOptions.Data = attachToExistingFileRequest;

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }
            // authentication (JWTBearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<File>("/files/{key}/attach", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AttachToExisitingFile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Copy a File 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to attach to</param>
        /// <param name="copyFileRequest">File information</param>
        /// <param name="xHiarcUserKey"> (optional)</param>
        /// <returns>File</returns>
        public File CopyFile(string key, CopyFileRequest copyFileRequest, string xHiarcUserKey = default(string))
        {
            HiarcSDK.Client.ApiResponse<File> localVarResponse = CopyFileWithHttpInfo(key, copyFileRequest, xHiarcUserKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Copy a File 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to attach to</param>
        /// <param name="copyFileRequest">File information</param>
        /// <param name="xHiarcUserKey"> (optional)</param>
        /// <returns>ApiResponse of File</returns>
        public HiarcSDK.Client.ApiResponse<File> CopyFileWithHttpInfo(string key, CopyFileRequest copyFileRequest, string xHiarcUserKey = default(string))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'key' when calling FileApi->CopyFile");

            // verify the required parameter 'copyFileRequest' is set
            if (copyFileRequest == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'copyFileRequest' when calling FileApi->CopyFile");

            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = HiarcSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HiarcSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", HiarcSDK.Client.ClientUtils.ParameterToString(key)); // path parameter
            if (xHiarcUserKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-User-Key", HiarcSDK.Client.ClientUtils.ParameterToString(xHiarcUserKey)); // header parameter
            }
            localVarRequestOptions.Data = copyFileRequest;

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }
            // authentication (JWTBearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<File>("/files/{key}/copy", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CopyFile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Copy a File 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to attach to</param>
        /// <param name="copyFileRequest">File information</param>
        /// <param name="xHiarcUserKey"> (optional)</param>
        /// <returns>Task of File</returns>
        public async System.Threading.Tasks.Task<File> CopyFileAsync(string key, CopyFileRequest copyFileRequest, string xHiarcUserKey = default(string))
        {
            HiarcSDK.Client.ApiResponse<File> localVarResponse = await CopyFileAsyncWithHttpInfo(key, copyFileRequest, xHiarcUserKey);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Copy a File 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to attach to</param>
        /// <param name="copyFileRequest">File information</param>
        /// <param name="xHiarcUserKey"> (optional)</param>
        /// <returns>Task of ApiResponse (File)</returns>
        public async System.Threading.Tasks.Task<HiarcSDK.Client.ApiResponse<File>> CopyFileAsyncWithHttpInfo(string key, CopyFileRequest copyFileRequest, string xHiarcUserKey = default(string))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'key' when calling FileApi->CopyFile");

            // verify the required parameter 'copyFileRequest' is set
            if (copyFileRequest == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'copyFileRequest' when calling FileApi->CopyFile");


            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("key", HiarcSDK.Client.ClientUtils.ParameterToString(key)); // path parameter
            if (xHiarcUserKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-User-Key", HiarcSDK.Client.ClientUtils.ParameterToString(xHiarcUserKey)); // header parameter
            }
            localVarRequestOptions.Data = copyFileRequest;

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }
            // authentication (JWTBearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<File>("/files/{key}/copy", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CopyFile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a direct upload url to a storage service 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDirectUploadUrlRequest">Storage service information</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <param name="expiresInSeconds">When access to the url should expire (optional)</param>
        /// <returns>FileDirectUpload</returns>
        public FileDirectUpload CreateDirectUploadUrl(CreateDirectUploadUrlRequest createDirectUploadUrlRequest, string xHiarcUserKey = default(string), int? expiresInSeconds = default(int?))
        {
            HiarcSDK.Client.ApiResponse<FileDirectUpload> localVarResponse = CreateDirectUploadUrlWithHttpInfo(createDirectUploadUrlRequest, xHiarcUserKey, expiresInSeconds);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a direct upload url to a storage service 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDirectUploadUrlRequest">Storage service information</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <param name="expiresInSeconds">When access to the url should expire (optional)</param>
        /// <returns>ApiResponse of FileDirectUpload</returns>
        public HiarcSDK.Client.ApiResponse<FileDirectUpload> CreateDirectUploadUrlWithHttpInfo(CreateDirectUploadUrlRequest createDirectUploadUrlRequest, string xHiarcUserKey = default(string), int? expiresInSeconds = default(int?))
        {
            // verify the required parameter 'createDirectUploadUrlRequest' is set
            if (createDirectUploadUrlRequest == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'createDirectUploadUrlRequest' when calling FileApi->CreateDirectUploadUrl");

            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = HiarcSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HiarcSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (expiresInSeconds != null)
            {
                localVarRequestOptions.QueryParameters.Add(HiarcSDK.Client.ClientUtils.ParameterToMultiMap("", "expiresInSeconds", expiresInSeconds));
            }
            if (xHiarcUserKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-User-Key", HiarcSDK.Client.ClientUtils.ParameterToString(xHiarcUserKey)); // header parameter
            }
            localVarRequestOptions.Data = createDirectUploadUrlRequest;

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<FileDirectUpload>("/files/directuploadurl", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDirectUploadUrl", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a direct upload url to a storage service 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDirectUploadUrlRequest">Storage service information</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <param name="expiresInSeconds">When access to the url should expire (optional)</param>
        /// <returns>Task of FileDirectUpload</returns>
        public async System.Threading.Tasks.Task<FileDirectUpload> CreateDirectUploadUrlAsync(CreateDirectUploadUrlRequest createDirectUploadUrlRequest, string xHiarcUserKey = default(string), int? expiresInSeconds = default(int?))
        {
            HiarcSDK.Client.ApiResponse<FileDirectUpload> localVarResponse = await CreateDirectUploadUrlAsyncWithHttpInfo(createDirectUploadUrlRequest, xHiarcUserKey, expiresInSeconds);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Create a direct upload url to a storage service 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDirectUploadUrlRequest">Storage service information</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <param name="expiresInSeconds">When access to the url should expire (optional)</param>
        /// <returns>Task of ApiResponse (FileDirectUpload)</returns>
        public async System.Threading.Tasks.Task<HiarcSDK.Client.ApiResponse<FileDirectUpload>> CreateDirectUploadUrlAsyncWithHttpInfo(CreateDirectUploadUrlRequest createDirectUploadUrlRequest, string xHiarcUserKey = default(string), int? expiresInSeconds = default(int?))
        {
            // verify the required parameter 'createDirectUploadUrlRequest' is set
            if (createDirectUploadUrlRequest == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'createDirectUploadUrlRequest' when calling FileApi->CreateDirectUploadUrl");


            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (expiresInSeconds != null)
            {
                localVarRequestOptions.QueryParameters.Add(HiarcSDK.Client.ClientUtils.ParameterToMultiMap("", "expiresInSeconds", expiresInSeconds));
            }
            if (xHiarcUserKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-User-Key", HiarcSDK.Client.ClientUtils.ParameterToString(xHiarcUserKey)); // header parameter
            }
            localVarRequestOptions.Data = createDirectUploadUrlRequest;

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<FileDirectUpload>("/files/directuploadurl", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDirectUploadUrl", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a File 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xHiarcUserKey"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <returns>File</returns>
        public File CreateFile(CreateFileRequest request, System.IO.Stream file, string xHiarcUserKey = default(string))
        {
            HiarcSDK.Client.ApiResponse<File> localVarResponse = CreateFileWithHttpInfo(request, file, xHiarcUserKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a File 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xHiarcUserKey"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <returns>ApiResponse of File</returns>
        public HiarcSDK.Client.ApiResponse<File> CreateFileWithHttpInfo(CreateFileRequest request, System.IO.Stream file, string xHiarcUserKey = default(string))
        {
            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = HiarcSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HiarcSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xHiarcUserKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-User-Key", HiarcSDK.Client.ClientUtils.ParameterToString(xHiarcUserKey)); // header parameter
            }

            var jsonContent = ClientUtils.JsonContent(request);
            var jsonString = jsonContent.ReadAsStringAsync().Result;
            localVarRequestOptions.FormParameters.Add("request", jsonString);
            localVarRequestOptions.FileParameters.Add("file", file);

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }
            // authentication (JWTBearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<File>("/files", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateFile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a File 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xHiarcUserKey"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <returns>Task of File</returns>
        public async System.Threading.Tasks.Task<File> CreateFileAsync(CreateFileRequest request, System.IO.Stream file, string xHiarcUserKey = default(string))
        {
            HiarcSDK.Client.ApiResponse<File> localVarResponse = await CreateFileAsyncWithHttpInfo(request, file, xHiarcUserKey);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Create a File 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xHiarcUserKey"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <returns>Task of ApiResponse (File)</returns>
        public async System.Threading.Tasks.Task<HiarcSDK.Client.ApiResponse<File>> CreateFileAsyncWithHttpInfo(CreateFileRequest request, System.IO.Stream file, string xHiarcUserKey = default(string))
        {

            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (xHiarcUserKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-User-Key", HiarcSDK.Client.ClientUtils.ParameterToString(xHiarcUserKey)); // header parameter
            }
            var jsonContent = ClientUtils.JsonContent(request);
            var jsonString = await jsonContent.ReadAsStringAsync();
            localVarRequestOptions.FormParameters.Add("request", jsonString);
            localVarRequestOptions.FileParameters.Add("file", file);

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }
            // authentication (JWTBearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<File>("/files", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateFile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a File 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to delete</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Object</returns>
        public Object DeleteFile(string key, string xHiarcUserKey = default(string))
        {
            HiarcSDK.Client.ApiResponse<Object> localVarResponse = DeleteFileWithHttpInfo(key, xHiarcUserKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a File 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to delete</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public HiarcSDK.Client.ApiResponse<Object> DeleteFileWithHttpInfo(string key, string xHiarcUserKey = default(string))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'key' when calling FileApi->DeleteFile");

            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = HiarcSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HiarcSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", HiarcSDK.Client.ClientUtils.ParameterToString(key)); // path parameter
            if (xHiarcUserKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-User-Key", HiarcSDK.Client.ClientUtils.ParameterToString(xHiarcUserKey)); // header parameter
            }

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }
            // authentication (JWTBearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/files/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a File 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to delete</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteFileAsync(string key, string xHiarcUserKey = default(string))
        {
            HiarcSDK.Client.ApiResponse<Object> localVarResponse = await DeleteFileAsyncWithHttpInfo(key, xHiarcUserKey);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a File 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to delete</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<HiarcSDK.Client.ApiResponse<Object>> DeleteFileAsyncWithHttpInfo(string key, string xHiarcUserKey = default(string))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'key' when calling FileApi->DeleteFile");


            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("key", HiarcSDK.Client.ClientUtils.ParameterToString(key)); // path parameter
            if (xHiarcUserKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-User-Key", HiarcSDK.Client.ClientUtils.ParameterToString(xHiarcUserKey)); // header parameter
            }

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }
            // authentication (JWTBearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/files/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Download a File 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to download</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream DownloadFile(string key, string xHiarcUserKey = default(string))
        {
            System.IO.Stream localVarResponse = DownloadFileWithHttpInfo(key, xHiarcUserKey);
            return localVarResponse;
        }

        /// <summary>
        /// Download a File 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to download</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public System.IO.Stream DownloadFileWithHttpInfo(string key, string xHiarcUserKey = default(string))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'key' when calling FileApi->DownloadFile");

            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/octet-stream"
            };

            var localVarContentType = HiarcSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HiarcSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", HiarcSDK.Client.ClientUtils.ParameterToString(key)); // path parameter
            if (xHiarcUserKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-User-Key", HiarcSDK.Client.ClientUtils.ParameterToString(xHiarcUserKey)); // header parameter
            }

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }
            // authentication (JWTBearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = ClientUtils.DownloadFile(this.Configuration, localVarRequestOptions, key).Result;
            // var localVarResponse = this.Client.Get<System.IO.Stream>("/files/{key}/download", localVarRequestOptions, this.Configuration);

            // if (this.ExceptionFactory != null)
            // {
            //     Exception _exception = this.ExceptionFactory("DownloadFile", localVarResponse);
            //     if (_exception != null) throw _exception;
            // }

            return localVarResponse;
        }

        /// <summary>
        /// Download a File 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to download</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> DownloadFileAsync(string key, string xHiarcUserKey = default(string))
        {
            System.IO.Stream localVarResponse = await DownloadFileAsyncWithHttpInfo(key, xHiarcUserKey);
            return localVarResponse;

        }

        /// <summary>
        /// Download a File 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to download</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> DownloadFileAsyncWithHttpInfo(string key, string xHiarcUserKey = default(string))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'key' when calling FileApi->DownloadFile");


            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/octet-stream"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            // localVarRequestOptions.PathParameters.Add("key", HiarcSDK.Client.ClientUtils.ParameterToString(key)); // path parameter
            if (xHiarcUserKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-User-Key", HiarcSDK.Client.ClientUtils.ParameterToString(xHiarcUserKey)); // header parameter
            }

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }
            // authentication (JWTBearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await ClientUtils.DownloadFile(this.Configuration, localVarRequestOptions, key);
            // var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/files/{key}/download", localVarRequestOptions, this.Configuration);
            // if (this.ExceptionFactory != null)
            // {
            //     Exception _exception = this.ExceptionFactory("DownloadFile", localVarResponse);
            //     if (_exception != null) throw _exception;
            // }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of Collections for a File 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to get all collections</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>List&lt;Collection&gt;</returns>
        public List<Collection> GetCollectionsForFile(string key, string xHiarcUserKey = default(string))
        {
            HiarcSDK.Client.ApiResponse<List<Collection>> localVarResponse = GetCollectionsForFileWithHttpInfo(key, xHiarcUserKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of Collections for a File 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to get all collections</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>ApiResponse of List&lt;Collection&gt;</returns>
        public HiarcSDK.Client.ApiResponse<List<Collection>> GetCollectionsForFileWithHttpInfo(string key, string xHiarcUserKey = default(string))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'key' when calling FileApi->GetCollectionsForFile");

            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = HiarcSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HiarcSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", HiarcSDK.Client.ClientUtils.ParameterToString(key)); // path parameter
            if (xHiarcUserKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-User-Key", HiarcSDK.Client.ClientUtils.ParameterToString(xHiarcUserKey)); // header parameter
            }

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }
            // authentication (JWTBearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Collection>>("/files/{key}/collections", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCollectionsForFile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of Collections for a File 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to get all collections</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of List&lt;Collection&gt;</returns>
        public async System.Threading.Tasks.Task<List<Collection>> GetCollectionsForFileAsync(string key, string xHiarcUserKey = default(string))
        {
            HiarcSDK.Client.ApiResponse<List<Collection>> localVarResponse = await GetCollectionsForFileAsyncWithHttpInfo(key, xHiarcUserKey);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of Collections for a File 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to get all collections</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Collection&gt;)</returns>
        public async System.Threading.Tasks.Task<HiarcSDK.Client.ApiResponse<List<Collection>>> GetCollectionsForFileAsyncWithHttpInfo(string key, string xHiarcUserKey = default(string))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'key' when calling FileApi->GetCollectionsForFile");


            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("key", HiarcSDK.Client.ClientUtils.ParameterToString(key)); // path parameter
            if (xHiarcUserKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-User-Key", HiarcSDK.Client.ClientUtils.ParameterToString(xHiarcUserKey)); // header parameter
            }

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }
            // authentication (JWTBearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Collection>>("/files/{key}/collections", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCollectionsForFile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a direct download URL to a File 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to get download URL</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <param name="expiresInSeconds">When access to the url should expire (optional)</param>
        /// <returns>FileDirectDownload</returns>
        public FileDirectDownload GetDirectDownloadUrl(string key, string xHiarcUserKey = default(string), int? expiresInSeconds = default(int?))
        {
            HiarcSDK.Client.ApiResponse<FileDirectDownload> localVarResponse = GetDirectDownloadUrlWithHttpInfo(key, xHiarcUserKey, expiresInSeconds);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a direct download URL to a File 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to get download URL</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <param name="expiresInSeconds">When access to the url should expire (optional)</param>
        /// <returns>ApiResponse of FileDirectDownload</returns>
        public HiarcSDK.Client.ApiResponse<FileDirectDownload> GetDirectDownloadUrlWithHttpInfo(string key, string xHiarcUserKey = default(string), int? expiresInSeconds = default(int?))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'key' when calling FileApi->GetDirectDownloadUrl");

            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = HiarcSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HiarcSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", HiarcSDK.Client.ClientUtils.ParameterToString(key)); // path parameter
            if (expiresInSeconds != null)
            {
                localVarRequestOptions.QueryParameters.Add(HiarcSDK.Client.ClientUtils.ParameterToMultiMap("", "expiresInSeconds", expiresInSeconds));
            }
            if (xHiarcUserKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-User-Key", HiarcSDK.Client.ClientUtils.ParameterToString(xHiarcUserKey)); // header parameter
            }

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }
            // authentication (JWTBearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FileDirectDownload>("/files/{key}/directdownloadurl", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDirectDownloadUrl", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a direct download URL to a File 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to get download URL</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <param name="expiresInSeconds">When access to the url should expire (optional)</param>
        /// <returns>Task of FileDirectDownload</returns>
        public async System.Threading.Tasks.Task<FileDirectDownload> GetDirectDownloadUrlAsync(string key, string xHiarcUserKey = default(string), int? expiresInSeconds = default(int?))
        {
            HiarcSDK.Client.ApiResponse<FileDirectDownload> localVarResponse = await GetDirectDownloadUrlAsyncWithHttpInfo(key, xHiarcUserKey, expiresInSeconds);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Get a direct download URL to a File 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to get download URL</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <param name="expiresInSeconds">When access to the url should expire (optional)</param>
        /// <returns>Task of ApiResponse (FileDirectDownload)</returns>
        public async System.Threading.Tasks.Task<HiarcSDK.Client.ApiResponse<FileDirectDownload>> GetDirectDownloadUrlAsyncWithHttpInfo(string key, string xHiarcUserKey = default(string), int? expiresInSeconds = default(int?))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'key' when calling FileApi->GetDirectDownloadUrl");


            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("key", HiarcSDK.Client.ClientUtils.ParameterToString(key)); // path parameter
            if (expiresInSeconds != null)
            {
                localVarRequestOptions.QueryParameters.Add(HiarcSDK.Client.ClientUtils.ParameterToMultiMap("", "expiresInSeconds", expiresInSeconds));
            }
            if (xHiarcUserKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-User-Key", HiarcSDK.Client.ClientUtils.ParameterToString(xHiarcUserKey)); // header parameter
            }

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }
            // authentication (JWTBearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<FileDirectDownload>("/files/{key}/directdownloadurl", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDirectDownloadUrl", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a File&#39;s Info 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to get info</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>File</returns>
        public File GetFile(string key, string xHiarcUserKey = default(string))
        {
            HiarcSDK.Client.ApiResponse<File> localVarResponse = GetFileWithHttpInfo(key, xHiarcUserKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a File&#39;s Info 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to get info</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>ApiResponse of File</returns>
        public HiarcSDK.Client.ApiResponse<File> GetFileWithHttpInfo(string key, string xHiarcUserKey = default(string))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'key' when calling FileApi->GetFile");

            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = HiarcSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HiarcSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", HiarcSDK.Client.ClientUtils.ParameterToString(key)); // path parameter
            if (xHiarcUserKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-User-Key", HiarcSDK.Client.ClientUtils.ParameterToString(xHiarcUserKey)); // header parameter
            }

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }
            // authentication (JWTBearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<File>("/files/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a File&#39;s Info 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to get info</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of File</returns>
        public async System.Threading.Tasks.Task<File> GetFileAsync(string key, string xHiarcUserKey = default(string))
        {
            HiarcSDK.Client.ApiResponse<File> localVarResponse = await GetFileAsyncWithHttpInfo(key, xHiarcUserKey);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Get a File&#39;s Info 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to get info</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of ApiResponse (File)</returns>
        public async System.Threading.Tasks.Task<HiarcSDK.Client.ApiResponse<File>> GetFileAsyncWithHttpInfo(string key, string xHiarcUserKey = default(string))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'key' when calling FileApi->GetFile");


            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("key", HiarcSDK.Client.ClientUtils.ParameterToString(key)); // path parameter
            if (xHiarcUserKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-User-Key", HiarcSDK.Client.ClientUtils.ParameterToString(xHiarcUserKey)); // header parameter
            }

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }
            // authentication (JWTBearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<File>("/files/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of Retention Policies on a File 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to get all retention policies</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>List&lt;RetentionPolicyApplication&gt;</returns>
        public List<RetentionPolicyApplication> GetRetentionPolicies(string key, string xHiarcUserKey = default(string))
        {
            HiarcSDK.Client.ApiResponse<List<RetentionPolicyApplication>> localVarResponse = GetRetentionPoliciesWithHttpInfo(key, xHiarcUserKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of Retention Policies on a File 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to get all retention policies</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>ApiResponse of List&lt;RetentionPolicyApplication&gt;</returns>
        public HiarcSDK.Client.ApiResponse<List<RetentionPolicyApplication>> GetRetentionPoliciesWithHttpInfo(string key, string xHiarcUserKey = default(string))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'key' when calling FileApi->GetRetentionPolicies");

            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = HiarcSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HiarcSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", HiarcSDK.Client.ClientUtils.ParameterToString(key)); // path parameter
            if (xHiarcUserKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-User-Key", HiarcSDK.Client.ClientUtils.ParameterToString(xHiarcUserKey)); // header parameter
            }

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }
            // authentication (JWTBearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<RetentionPolicyApplication>>("/files/{key}/retentionpolicies", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRetentionPolicies", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of Retention Policies on a File 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to get all retention policies</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of List&lt;RetentionPolicyApplication&gt;</returns>
        public async System.Threading.Tasks.Task<List<RetentionPolicyApplication>> GetRetentionPoliciesAsync(string key, string xHiarcUserKey = default(string))
        {
            HiarcSDK.Client.ApiResponse<List<RetentionPolicyApplication>> localVarResponse = await GetRetentionPoliciesAsyncWithHttpInfo(key, xHiarcUserKey);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of Retention Policies on a File 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to get all retention policies</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;RetentionPolicyApplication&gt;)</returns>
        public async System.Threading.Tasks.Task<HiarcSDK.Client.ApiResponse<List<RetentionPolicyApplication>>> GetRetentionPoliciesAsyncWithHttpInfo(string key, string xHiarcUserKey = default(string))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'key' when calling FileApi->GetRetentionPolicies");


            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("key", HiarcSDK.Client.ClientUtils.ParameterToString(key)); // path parameter
            if (xHiarcUserKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-User-Key", HiarcSDK.Client.ClientUtils.ParameterToString(xHiarcUserKey)); // header parameter
            }

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }
            // authentication (JWTBearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<RetentionPolicyApplication>>("/files/{key}/retentionpolicies", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRetentionPolicies", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of File Versions 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to get all versions</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>List&lt;FileVersion&gt;</returns>
        public List<FileVersion> GetVersions(string key, string xHiarcUserKey = default(string))
        {
            HiarcSDK.Client.ApiResponse<List<FileVersion>> localVarResponse = GetVersionsWithHttpInfo(key, xHiarcUserKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of File Versions 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to get all versions</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>ApiResponse of List&lt;FileVersion&gt;</returns>
        public HiarcSDK.Client.ApiResponse<List<FileVersion>> GetVersionsWithHttpInfo(string key, string xHiarcUserKey = default(string))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'key' when calling FileApi->GetVersions");

            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = HiarcSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HiarcSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", HiarcSDK.Client.ClientUtils.ParameterToString(key)); // path parameter
            if (xHiarcUserKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-User-Key", HiarcSDK.Client.ClientUtils.ParameterToString(xHiarcUserKey)); // header parameter
            }

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }
            // authentication (JWTBearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<FileVersion>>("/files/{key}/versions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVersions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of File Versions 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to get all versions</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of List&lt;FileVersion&gt;</returns>
        public async System.Threading.Tasks.Task<List<FileVersion>> GetVersionsAsync(string key, string xHiarcUserKey = default(string))
        {
            HiarcSDK.Client.ApiResponse<List<FileVersion>> localVarResponse = await GetVersionsAsyncWithHttpInfo(key, xHiarcUserKey);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of File Versions 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to get all versions</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;FileVersion&gt;)</returns>
        public async System.Threading.Tasks.Task<HiarcSDK.Client.ApiResponse<List<FileVersion>>> GetVersionsAsyncWithHttpInfo(string key, string xHiarcUserKey = default(string))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'key' when calling FileApi->GetVersions");


            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("key", HiarcSDK.Client.ClientUtils.ParameterToString(key)); // path parameter
            if (xHiarcUserKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-User-Key", HiarcSDK.Client.ClientUtils.ParameterToString(xHiarcUserKey)); // header parameter
            }

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }
            // authentication (JWTBearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<FileVersion>>("/files/{key}/versions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVersions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a File 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to update</param>
        /// <param name="updateFileRequest">File information</param>
        /// <returns>File</returns>
        public File UpdateFile(string key, UpdateFileRequest updateFileRequest)
        {
            HiarcSDK.Client.ApiResponse<File> localVarResponse = UpdateFileWithHttpInfo(key, updateFileRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a File 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to update</param>
        /// <param name="updateFileRequest">File information</param>
        /// <returns>ApiResponse of File</returns>
        public HiarcSDK.Client.ApiResponse<File> UpdateFileWithHttpInfo(string key, UpdateFileRequest updateFileRequest)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'key' when calling FileApi->UpdateFile");

            // verify the required parameter 'updateFileRequest' is set
            if (updateFileRequest == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'updateFileRequest' when calling FileApi->UpdateFile");

            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = HiarcSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HiarcSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", HiarcSDK.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.Data = updateFileRequest;

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<File>("/files/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateFile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a File 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to update</param>
        /// <param name="updateFileRequest">File information</param>
        /// <returns>Task of File</returns>
        public async System.Threading.Tasks.Task<File> UpdateFileAsync(string key, UpdateFileRequest updateFileRequest)
        {
            HiarcSDK.Client.ApiResponse<File> localVarResponse = await UpdateFileAsyncWithHttpInfo(key, updateFileRequest);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Update a File 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of file to update</param>
        /// <param name="updateFileRequest">File information</param>
        /// <returns>Task of ApiResponse (File)</returns>
        public async System.Threading.Tasks.Task<HiarcSDK.Client.ApiResponse<File>> UpdateFileAsyncWithHttpInfo(string key, UpdateFileRequest updateFileRequest)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'key' when calling FileApi->UpdateFile");

            // verify the required parameter 'updateFileRequest' is set
            if (updateFileRequest == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'updateFileRequest' when calling FileApi->UpdateFile");


            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("key", HiarcSDK.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.Data = updateFileRequest;

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<File>("/files/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateFile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
