/* 
 * Hiarc API
 *
 * Welcome to the Hiarc API documentation.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using HiarcSDK.Client;
using HiarcSDK.Model;

namespace HiarcSDK.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICollectionApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a child item to a Collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Collection</param>
        /// <param name="childKey">Key of item to add as child to Collection</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Object</returns>
        Object AddChildToCollection (string key, string childKey, string xHiarcUserKey = default(string));

        /// <summary>
        /// Add a child item to a Collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Collection</param>
        /// <param name="childKey">Key of item to add as child to Collection</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AddChildToCollectionWithHttpInfo (string key, string childKey, string xHiarcUserKey = default(string));
        /// <summary>
        /// Add a File to a Collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Collection</param>
        /// <param name="addFileToCollectionRequest">Add File request</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Object</returns>
        Object AddFileToCollection (string key, AddFileToCollectionRequest addFileToCollectionRequest, string xHiarcUserKey = default(string));

        /// <summary>
        /// Add a File to a Collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Collection</param>
        /// <param name="addFileToCollectionRequest">Add File request</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AddFileToCollectionWithHttpInfo (string key, AddFileToCollectionRequest addFileToCollectionRequest, string xHiarcUserKey = default(string));
        /// <summary>
        /// Add a Group to a Collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Collection</param>
        /// <param name="addGroupToCollectionRequest">Add Group request</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Object</returns>
        Object AddGroupToCollection (string key, AddGroupToCollectionRequest addGroupToCollectionRequest, string xHiarcUserKey = default(string));

        /// <summary>
        /// Add a Group to a Collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Collection</param>
        /// <param name="addGroupToCollectionRequest">Add Group request</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AddGroupToCollectionWithHttpInfo (string key, AddGroupToCollectionRequest addGroupToCollectionRequest, string xHiarcUserKey = default(string));
        /// <summary>
        /// Add a User to a Collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Collection</param>
        /// <param name="addUserToCollectionRequest">Add User request</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Object</returns>
        Object AddUserToCollection (string key, AddUserToCollectionRequest addUserToCollectionRequest, string xHiarcUserKey = default(string));

        /// <summary>
        /// Add a User to a Collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Collection</param>
        /// <param name="addUserToCollectionRequest">Add User request</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AddUserToCollectionWithHttpInfo (string key, AddUserToCollectionRequest addUserToCollectionRequest, string xHiarcUserKey = default(string));
        /// <summary>
        /// Create a Collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCollectionRequest">Collection information</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Collection</returns>
        Collection CreateCollection (CreateCollectionRequest createCollectionRequest, string xHiarcUserKey = default(string));

        /// <summary>
        /// Create a Collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCollectionRequest">Collection information</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>ApiResponse of Collection</returns>
        ApiResponse<Collection> CreateCollectionWithHttpInfo (CreateCollectionRequest createCollectionRequest, string xHiarcUserKey = default(string));
        /// <summary>
        /// Delete a Collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Collection to delete</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Object</returns>
        Object DeleteCollection (string key, string xHiarcUserKey = default(string));

        /// <summary>
        /// Delete a Collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Collection to delete</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteCollectionWithHttpInfo (string key, string xHiarcUserKey = default(string));
        /// <summary>
        /// Find a Collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findCollectionsRequest">Collection query</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>List&lt;Collection&gt;</returns>
        List<Collection> FindCollection (FindCollectionsRequest findCollectionsRequest, string xHiarcUserKey = default(string));

        /// <summary>
        /// Find a Collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findCollectionsRequest">Collection query</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>ApiResponse of List&lt;Collection&gt;</returns>
        ApiResponse<List<Collection>> FindCollectionWithHttpInfo (FindCollectionsRequest findCollectionsRequest, string xHiarcUserKey = default(string));
        /// <summary>
        /// Get all Collections
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>List&lt;Collection&gt;</returns>
        List<Collection> GetAllCollections (string xHiarcUserKey = default(string));

        /// <summary>
        /// Get all Collections
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>ApiResponse of List&lt;Collection&gt;</returns>
        ApiResponse<List<Collection>> GetAllCollectionsWithHttpInfo (string xHiarcUserKey = default(string));
        /// <summary>
        /// Get a Collection&#39;s Info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of collection to get info</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Collection</returns>
        Collection GetCollection (string key, string xHiarcUserKey = default(string));

        /// <summary>
        /// Get a Collection&#39;s Info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of collection to get info</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>ApiResponse of Collection</returns>
        ApiResponse<Collection> GetCollectionWithHttpInfo (string key, string xHiarcUserKey = default(string));
        /// <summary>
        /// Get a Collection&#39;s child Collections
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of collection</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>List&lt;Collection&gt;</returns>
        List<Collection> GetCollectionChildren (string key, string xHiarcUserKey = default(string));

        /// <summary>
        /// Get a Collection&#39;s child Collections
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of collection</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>ApiResponse of List&lt;Collection&gt;</returns>
        ApiResponse<List<Collection>> GetCollectionChildrenWithHttpInfo (string key, string xHiarcUserKey = default(string));
        /// <summary>
        /// Get a Collection&#39;s Files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of collection</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>List&lt;File&gt;</returns>
        List<File> GetCollectionFiles (string key, string xHiarcUserKey = default(string));

        /// <summary>
        /// Get a Collection&#39;s Files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of collection</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>ApiResponse of List&lt;File&gt;</returns>
        ApiResponse<List<File>> GetCollectionFilesWithHttpInfo (string key, string xHiarcUserKey = default(string));
        /// <summary>
        /// Get a Collection&#39;s child items, including Collections and Files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of collection</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>CollectionItems</returns>
        CollectionItems GetCollectionItems (string key, string xHiarcUserKey = default(string));

        /// <summary>
        /// Get a Collection&#39;s child items, including Collections and Files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of collection</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>ApiResponse of CollectionItems</returns>
        ApiResponse<CollectionItems> GetCollectionItemsWithHttpInfo (string key, string xHiarcUserKey = default(string));
        /// <summary>
        /// Remove a File from a Collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Collection</param>
        /// <param name="fileKey">Key of File to remove from Collection</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Object</returns>
        Object RemoveFileFromCollection (string key, string fileKey, string xHiarcUserKey = default(string));

        /// <summary>
        /// Remove a File from a Collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Collection</param>
        /// <param name="fileKey">Key of File to remove from Collection</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> RemoveFileFromCollectionWithHttpInfo (string key, string fileKey, string xHiarcUserKey = default(string));
        /// <summary>
        /// Update a Collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of collection to get info</param>
        /// <param name="updateCollectionRequest">Collection information</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Collection</returns>
        Collection UpdateCollection (string key, UpdateCollectionRequest updateCollectionRequest, string xHiarcUserKey = default(string));

        /// <summary>
        /// Update a Collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of collection to get info</param>
        /// <param name="updateCollectionRequest">Collection information</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>ApiResponse of Collection</returns>
        ApiResponse<Collection> UpdateCollectionWithHttpInfo (string key, UpdateCollectionRequest updateCollectionRequest, string xHiarcUserKey = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICollectionApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add a child item to a Collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Collection</param>
        /// <param name="childKey">Key of item to add as child to Collection</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AddChildToCollectionAsync (string key, string childKey, string xHiarcUserKey = default(string));

        /// <summary>
        /// Add a child item to a Collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Collection</param>
        /// <param name="childKey">Key of item to add as child to Collection</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddChildToCollectionAsyncWithHttpInfo (string key, string childKey, string xHiarcUserKey = default(string));
        /// <summary>
        /// Add a File to a Collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Collection</param>
        /// <param name="addFileToCollectionRequest">Add File request</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AddFileToCollectionAsync (string key, AddFileToCollectionRequest addFileToCollectionRequest, string xHiarcUserKey = default(string));

        /// <summary>
        /// Add a File to a Collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Collection</param>
        /// <param name="addFileToCollectionRequest">Add File request</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddFileToCollectionAsyncWithHttpInfo (string key, AddFileToCollectionRequest addFileToCollectionRequest, string xHiarcUserKey = default(string));
        /// <summary>
        /// Add a Group to a Collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Collection</param>
        /// <param name="addGroupToCollectionRequest">Add Group request</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AddGroupToCollectionAsync (string key, AddGroupToCollectionRequest addGroupToCollectionRequest, string xHiarcUserKey = default(string));

        /// <summary>
        /// Add a Group to a Collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Collection</param>
        /// <param name="addGroupToCollectionRequest">Add Group request</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddGroupToCollectionAsyncWithHttpInfo (string key, AddGroupToCollectionRequest addGroupToCollectionRequest, string xHiarcUserKey = default(string));
        /// <summary>
        /// Add a User to a Collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Collection</param>
        /// <param name="addUserToCollectionRequest">Add User request</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AddUserToCollectionAsync (string key, AddUserToCollectionRequest addUserToCollectionRequest, string xHiarcUserKey = default(string));

        /// <summary>
        /// Add a User to a Collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Collection</param>
        /// <param name="addUserToCollectionRequest">Add User request</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddUserToCollectionAsyncWithHttpInfo (string key, AddUserToCollectionRequest addUserToCollectionRequest, string xHiarcUserKey = default(string));
        /// <summary>
        /// Create a Collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCollectionRequest">Collection information</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of Collection</returns>
        System.Threading.Tasks.Task<Collection> CreateCollectionAsync (CreateCollectionRequest createCollectionRequest, string xHiarcUserKey = default(string));

        /// <summary>
        /// Create a Collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCollectionRequest">Collection information</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of ApiResponse (Collection)</returns>
        System.Threading.Tasks.Task<ApiResponse<Collection>> CreateCollectionAsyncWithHttpInfo (CreateCollectionRequest createCollectionRequest, string xHiarcUserKey = default(string));
        /// <summary>
        /// Delete a Collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Collection to delete</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteCollectionAsync (string key, string xHiarcUserKey = default(string));

        /// <summary>
        /// Delete a Collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Collection to delete</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCollectionAsyncWithHttpInfo (string key, string xHiarcUserKey = default(string));
        /// <summary>
        /// Find a Collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findCollectionsRequest">Collection query</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of List&lt;Collection&gt;</returns>
        System.Threading.Tasks.Task<List<Collection>> FindCollectionAsync (FindCollectionsRequest findCollectionsRequest, string xHiarcUserKey = default(string));

        /// <summary>
        /// Find a Collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findCollectionsRequest">Collection query</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Collection&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Collection>>> FindCollectionAsyncWithHttpInfo (FindCollectionsRequest findCollectionsRequest, string xHiarcUserKey = default(string));
        /// <summary>
        /// Get all Collections
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of List&lt;Collection&gt;</returns>
        System.Threading.Tasks.Task<List<Collection>> GetAllCollectionsAsync (string xHiarcUserKey = default(string));

        /// <summary>
        /// Get all Collections
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Collection&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Collection>>> GetAllCollectionsAsyncWithHttpInfo (string xHiarcUserKey = default(string));
        /// <summary>
        /// Get a Collection&#39;s Info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of collection to get info</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of Collection</returns>
        System.Threading.Tasks.Task<Collection> GetCollectionAsync (string key, string xHiarcUserKey = default(string));

        /// <summary>
        /// Get a Collection&#39;s Info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of collection to get info</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of ApiResponse (Collection)</returns>
        System.Threading.Tasks.Task<ApiResponse<Collection>> GetCollectionAsyncWithHttpInfo (string key, string xHiarcUserKey = default(string));
        /// <summary>
        /// Get a Collection&#39;s child Collections
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of collection</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of List&lt;Collection&gt;</returns>
        System.Threading.Tasks.Task<List<Collection>> GetCollectionChildrenAsync (string key, string xHiarcUserKey = default(string));

        /// <summary>
        /// Get a Collection&#39;s child Collections
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of collection</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Collection&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Collection>>> GetCollectionChildrenAsyncWithHttpInfo (string key, string xHiarcUserKey = default(string));
        /// <summary>
        /// Get a Collection&#39;s Files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of collection</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of List&lt;File&gt;</returns>
        System.Threading.Tasks.Task<List<File>> GetCollectionFilesAsync (string key, string xHiarcUserKey = default(string));

        /// <summary>
        /// Get a Collection&#39;s Files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of collection</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;File&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<File>>> GetCollectionFilesAsyncWithHttpInfo (string key, string xHiarcUserKey = default(string));
        /// <summary>
        /// Get a Collection&#39;s child items, including Collections and Files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of collection</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of CollectionItems</returns>
        System.Threading.Tasks.Task<CollectionItems> GetCollectionItemsAsync (string key, string xHiarcUserKey = default(string));

        /// <summary>
        /// Get a Collection&#39;s child items, including Collections and Files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of collection</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of ApiResponse (CollectionItems)</returns>
        System.Threading.Tasks.Task<ApiResponse<CollectionItems>> GetCollectionItemsAsyncWithHttpInfo (string key, string xHiarcUserKey = default(string));
        /// <summary>
        /// Remove a File from a Collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Collection</param>
        /// <param name="fileKey">Key of File to remove from Collection</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> RemoveFileFromCollectionAsync (string key, string fileKey, string xHiarcUserKey = default(string));

        /// <summary>
        /// Remove a File from a Collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Collection</param>
        /// <param name="fileKey">Key of File to remove from Collection</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveFileFromCollectionAsyncWithHttpInfo (string key, string fileKey, string xHiarcUserKey = default(string));
        /// <summary>
        /// Update a Collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of collection to get info</param>
        /// <param name="updateCollectionRequest">Collection information</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of Collection</returns>
        System.Threading.Tasks.Task<Collection> UpdateCollectionAsync (string key, UpdateCollectionRequest updateCollectionRequest, string xHiarcUserKey = default(string));

        /// <summary>
        /// Update a Collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of collection to get info</param>
        /// <param name="updateCollectionRequest">Collection information</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of ApiResponse (Collection)</returns>
        System.Threading.Tasks.Task<ApiResponse<Collection>> UpdateCollectionAsyncWithHttpInfo (string key, UpdateCollectionRequest updateCollectionRequest, string xHiarcUserKey = default(string));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICollectionApi : ICollectionApiSync, ICollectionApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CollectionApi : ICollectionApi
    {
        private HiarcSDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CollectionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CollectionApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CollectionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CollectionApi(String basePath)
        {
            this.Configuration = HiarcSDK.Client.Configuration.MergeConfigurations(
                HiarcSDK.Client.GlobalConfiguration.Instance,
                new HiarcSDK.Client.Configuration { BasePath = basePath }
            );
            this.Client = new HiarcSDK.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HiarcSDK.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = HiarcSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CollectionApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CollectionApi(HiarcSDK.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = HiarcSDK.Client.Configuration.MergeConfigurations(
                HiarcSDK.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new HiarcSDK.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HiarcSDK.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = HiarcSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CollectionApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CollectionApi(HiarcSDK.Client.ISynchronousClient client,HiarcSDK.Client.IAsynchronousClient asyncClient, HiarcSDK.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = HiarcSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public HiarcSDK.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public HiarcSDK.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public HiarcSDK.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public HiarcSDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add a child item to a Collection 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Collection</param>
        /// <param name="childKey">Key of item to add as child to Collection</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Object</returns>
        public Object AddChildToCollection (string key, string childKey, string xHiarcUserKey = default(string))
        {
             HiarcSDK.Client.ApiResponse<Object> localVarResponse = AddChildToCollectionWithHttpInfo(key, childKey, xHiarcUserKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a child item to a Collection 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Collection</param>
        /// <param name="childKey">Key of item to add as child to Collection</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public HiarcSDK.Client.ApiResponse< Object > AddChildToCollectionWithHttpInfo (string key, string childKey, string xHiarcUserKey = default(string))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'key' when calling CollectionApi->AddChildToCollection");

            // verify the required parameter 'childKey' is set
            if (childKey == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'childKey' when calling CollectionApi->AddChildToCollection");

            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = HiarcSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HiarcSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", HiarcSDK.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.PathParameters.Add("childKey", HiarcSDK.Client.ClientUtils.ParameterToString(childKey)); // path parameter
            if (xHiarcUserKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-User-Key", HiarcSDK.Client.ClientUtils.ParameterToString(xHiarcUserKey)); // header parameter
            }

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }
            // authentication (JWTBearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< Object >("/collections/{key}/children/{childKey}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddChildToCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a child item to a Collection 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Collection</param>
        /// <param name="childKey">Key of item to add as child to Collection</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AddChildToCollectionAsync (string key, string childKey, string xHiarcUserKey = default(string))
        {
             HiarcSDK.Client.ApiResponse<Object> localVarResponse = await AddChildToCollectionAsyncWithHttpInfo(key, childKey, xHiarcUserKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a child item to a Collection 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Collection</param>
        /// <param name="childKey">Key of item to add as child to Collection</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<HiarcSDK.Client.ApiResponse<Object>> AddChildToCollectionAsyncWithHttpInfo (string key, string childKey, string xHiarcUserKey = default(string))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'key' when calling CollectionApi->AddChildToCollection");

            // verify the required parameter 'childKey' is set
            if (childKey == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'childKey' when calling CollectionApi->AddChildToCollection");


            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("key", HiarcSDK.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.PathParameters.Add("childKey", HiarcSDK.Client.ClientUtils.ParameterToString(childKey)); // path parameter
            if (xHiarcUserKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-User-Key", HiarcSDK.Client.ClientUtils.ParameterToString(xHiarcUserKey)); // header parameter
            }

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }
            // authentication (JWTBearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/collections/{key}/children/{childKey}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddChildToCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a File to a Collection 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Collection</param>
        /// <param name="addFileToCollectionRequest">Add File request</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Object</returns>
        public Object AddFileToCollection (string key, AddFileToCollectionRequest addFileToCollectionRequest, string xHiarcUserKey = default(string))
        {
             HiarcSDK.Client.ApiResponse<Object> localVarResponse = AddFileToCollectionWithHttpInfo(key, addFileToCollectionRequest, xHiarcUserKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a File to a Collection 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Collection</param>
        /// <param name="addFileToCollectionRequest">Add File request</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public HiarcSDK.Client.ApiResponse< Object > AddFileToCollectionWithHttpInfo (string key, AddFileToCollectionRequest addFileToCollectionRequest, string xHiarcUserKey = default(string))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'key' when calling CollectionApi->AddFileToCollection");

            // verify the required parameter 'addFileToCollectionRequest' is set
            if (addFileToCollectionRequest == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'addFileToCollectionRequest' when calling CollectionApi->AddFileToCollection");

            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = HiarcSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HiarcSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", HiarcSDK.Client.ClientUtils.ParameterToString(key)); // path parameter
            if (xHiarcUserKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-User-Key", HiarcSDK.Client.ClientUtils.ParameterToString(xHiarcUserKey)); // header parameter
            }
            localVarRequestOptions.Data = addFileToCollectionRequest;

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }
            // authentication (JWTBearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< Object >("/collections/{key}/files", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddFileToCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a File to a Collection 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Collection</param>
        /// <param name="addFileToCollectionRequest">Add File request</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AddFileToCollectionAsync (string key, AddFileToCollectionRequest addFileToCollectionRequest, string xHiarcUserKey = default(string))
        {
             HiarcSDK.Client.ApiResponse<Object> localVarResponse = await AddFileToCollectionAsyncWithHttpInfo(key, addFileToCollectionRequest, xHiarcUserKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a File to a Collection 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Collection</param>
        /// <param name="addFileToCollectionRequest">Add File request</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<HiarcSDK.Client.ApiResponse<Object>> AddFileToCollectionAsyncWithHttpInfo (string key, AddFileToCollectionRequest addFileToCollectionRequest, string xHiarcUserKey = default(string))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'key' when calling CollectionApi->AddFileToCollection");

            // verify the required parameter 'addFileToCollectionRequest' is set
            if (addFileToCollectionRequest == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'addFileToCollectionRequest' when calling CollectionApi->AddFileToCollection");


            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("key", HiarcSDK.Client.ClientUtils.ParameterToString(key)); // path parameter
            if (xHiarcUserKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-User-Key", HiarcSDK.Client.ClientUtils.ParameterToString(xHiarcUserKey)); // header parameter
            }
            localVarRequestOptions.Data = addFileToCollectionRequest;

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }
            // authentication (JWTBearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/collections/{key}/files", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddFileToCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a Group to a Collection 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Collection</param>
        /// <param name="addGroupToCollectionRequest">Add Group request</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Object</returns>
        public Object AddGroupToCollection (string key, AddGroupToCollectionRequest addGroupToCollectionRequest, string xHiarcUserKey = default(string))
        {
             HiarcSDK.Client.ApiResponse<Object> localVarResponse = AddGroupToCollectionWithHttpInfo(key, addGroupToCollectionRequest, xHiarcUserKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a Group to a Collection 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Collection</param>
        /// <param name="addGroupToCollectionRequest">Add Group request</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public HiarcSDK.Client.ApiResponse< Object > AddGroupToCollectionWithHttpInfo (string key, AddGroupToCollectionRequest addGroupToCollectionRequest, string xHiarcUserKey = default(string))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'key' when calling CollectionApi->AddGroupToCollection");

            // verify the required parameter 'addGroupToCollectionRequest' is set
            if (addGroupToCollectionRequest == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'addGroupToCollectionRequest' when calling CollectionApi->AddGroupToCollection");

            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = HiarcSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HiarcSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", HiarcSDK.Client.ClientUtils.ParameterToString(key)); // path parameter
            if (xHiarcUserKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-User-Key", HiarcSDK.Client.ClientUtils.ParameterToString(xHiarcUserKey)); // header parameter
            }
            localVarRequestOptions.Data = addGroupToCollectionRequest;

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }
            // authentication (JWTBearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< Object >("/collections/{key}/groups", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddGroupToCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a Group to a Collection 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Collection</param>
        /// <param name="addGroupToCollectionRequest">Add Group request</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AddGroupToCollectionAsync (string key, AddGroupToCollectionRequest addGroupToCollectionRequest, string xHiarcUserKey = default(string))
        {
             HiarcSDK.Client.ApiResponse<Object> localVarResponse = await AddGroupToCollectionAsyncWithHttpInfo(key, addGroupToCollectionRequest, xHiarcUserKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a Group to a Collection 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Collection</param>
        /// <param name="addGroupToCollectionRequest">Add Group request</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<HiarcSDK.Client.ApiResponse<Object>> AddGroupToCollectionAsyncWithHttpInfo (string key, AddGroupToCollectionRequest addGroupToCollectionRequest, string xHiarcUserKey = default(string))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'key' when calling CollectionApi->AddGroupToCollection");

            // verify the required parameter 'addGroupToCollectionRequest' is set
            if (addGroupToCollectionRequest == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'addGroupToCollectionRequest' when calling CollectionApi->AddGroupToCollection");


            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("key", HiarcSDK.Client.ClientUtils.ParameterToString(key)); // path parameter
            if (xHiarcUserKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-User-Key", HiarcSDK.Client.ClientUtils.ParameterToString(xHiarcUserKey)); // header parameter
            }
            localVarRequestOptions.Data = addGroupToCollectionRequest;

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }
            // authentication (JWTBearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/collections/{key}/groups", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddGroupToCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a User to a Collection 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Collection</param>
        /// <param name="addUserToCollectionRequest">Add User request</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Object</returns>
        public Object AddUserToCollection (string key, AddUserToCollectionRequest addUserToCollectionRequest, string xHiarcUserKey = default(string))
        {
             HiarcSDK.Client.ApiResponse<Object> localVarResponse = AddUserToCollectionWithHttpInfo(key, addUserToCollectionRequest, xHiarcUserKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a User to a Collection 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Collection</param>
        /// <param name="addUserToCollectionRequest">Add User request</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public HiarcSDK.Client.ApiResponse< Object > AddUserToCollectionWithHttpInfo (string key, AddUserToCollectionRequest addUserToCollectionRequest, string xHiarcUserKey = default(string))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'key' when calling CollectionApi->AddUserToCollection");

            // verify the required parameter 'addUserToCollectionRequest' is set
            if (addUserToCollectionRequest == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'addUserToCollectionRequest' when calling CollectionApi->AddUserToCollection");

            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = HiarcSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HiarcSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", HiarcSDK.Client.ClientUtils.ParameterToString(key)); // path parameter
            if (xHiarcUserKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-User-Key", HiarcSDK.Client.ClientUtils.ParameterToString(xHiarcUserKey)); // header parameter
            }
            localVarRequestOptions.Data = addUserToCollectionRequest;

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }
            // authentication (JWTBearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< Object >("/collections/{key}/users", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddUserToCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a User to a Collection 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Collection</param>
        /// <param name="addUserToCollectionRequest">Add User request</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AddUserToCollectionAsync (string key, AddUserToCollectionRequest addUserToCollectionRequest, string xHiarcUserKey = default(string))
        {
             HiarcSDK.Client.ApiResponse<Object> localVarResponse = await AddUserToCollectionAsyncWithHttpInfo(key, addUserToCollectionRequest, xHiarcUserKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a User to a Collection 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Collection</param>
        /// <param name="addUserToCollectionRequest">Add User request</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<HiarcSDK.Client.ApiResponse<Object>> AddUserToCollectionAsyncWithHttpInfo (string key, AddUserToCollectionRequest addUserToCollectionRequest, string xHiarcUserKey = default(string))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'key' when calling CollectionApi->AddUserToCollection");

            // verify the required parameter 'addUserToCollectionRequest' is set
            if (addUserToCollectionRequest == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'addUserToCollectionRequest' when calling CollectionApi->AddUserToCollection");


            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("key", HiarcSDK.Client.ClientUtils.ParameterToString(key)); // path parameter
            if (xHiarcUserKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-User-Key", HiarcSDK.Client.ClientUtils.ParameterToString(xHiarcUserKey)); // header parameter
            }
            localVarRequestOptions.Data = addUserToCollectionRequest;

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }
            // authentication (JWTBearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/collections/{key}/users", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddUserToCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Collection 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCollectionRequest">Collection information</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Collection</returns>
        public Collection CreateCollection (CreateCollectionRequest createCollectionRequest, string xHiarcUserKey = default(string))
        {
             HiarcSDK.Client.ApiResponse<Collection> localVarResponse = CreateCollectionWithHttpInfo(createCollectionRequest, xHiarcUserKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Collection 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCollectionRequest">Collection information</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>ApiResponse of Collection</returns>
        public HiarcSDK.Client.ApiResponse< Collection > CreateCollectionWithHttpInfo (CreateCollectionRequest createCollectionRequest, string xHiarcUserKey = default(string))
        {
            // verify the required parameter 'createCollectionRequest' is set
            if (createCollectionRequest == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'createCollectionRequest' when calling CollectionApi->CreateCollection");

            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = HiarcSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HiarcSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xHiarcUserKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-User-Key", HiarcSDK.Client.ClientUtils.ParameterToString(xHiarcUserKey)); // header parameter
            }
            localVarRequestOptions.Data = createCollectionRequest;

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Collection >("/collections", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Collection 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCollectionRequest">Collection information</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of Collection</returns>
        public async System.Threading.Tasks.Task<Collection> CreateCollectionAsync (CreateCollectionRequest createCollectionRequest, string xHiarcUserKey = default(string))
        {
             HiarcSDK.Client.ApiResponse<Collection> localVarResponse = await CreateCollectionAsyncWithHttpInfo(createCollectionRequest, xHiarcUserKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a Collection 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCollectionRequest">Collection information</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of ApiResponse (Collection)</returns>
        public async System.Threading.Tasks.Task<HiarcSDK.Client.ApiResponse<Collection>> CreateCollectionAsyncWithHttpInfo (CreateCollectionRequest createCollectionRequest, string xHiarcUserKey = default(string))
        {
            // verify the required parameter 'createCollectionRequest' is set
            if (createCollectionRequest == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'createCollectionRequest' when calling CollectionApi->CreateCollection");


            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (xHiarcUserKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-User-Key", HiarcSDK.Client.ClientUtils.ParameterToString(xHiarcUserKey)); // header parameter
            }
            localVarRequestOptions.Data = createCollectionRequest;

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Collection>("/collections", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Collection 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Collection to delete</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Object</returns>
        public Object DeleteCollection (string key, string xHiarcUserKey = default(string))
        {
             HiarcSDK.Client.ApiResponse<Object> localVarResponse = DeleteCollectionWithHttpInfo(key, xHiarcUserKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a Collection 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Collection to delete</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public HiarcSDK.Client.ApiResponse< Object > DeleteCollectionWithHttpInfo (string key, string xHiarcUserKey = default(string))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'key' when calling CollectionApi->DeleteCollection");

            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = HiarcSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HiarcSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", HiarcSDK.Client.ClientUtils.ParameterToString(key)); // path parameter
            if (xHiarcUserKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-User-Key", HiarcSDK.Client.ClientUtils.ParameterToString(xHiarcUserKey)); // header parameter
            }

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }
            // authentication (JWTBearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete< Object >("/collections/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Collection 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Collection to delete</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteCollectionAsync (string key, string xHiarcUserKey = default(string))
        {
             HiarcSDK.Client.ApiResponse<Object> localVarResponse = await DeleteCollectionAsyncWithHttpInfo(key, xHiarcUserKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a Collection 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Collection to delete</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<HiarcSDK.Client.ApiResponse<Object>> DeleteCollectionAsyncWithHttpInfo (string key, string xHiarcUserKey = default(string))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'key' when calling CollectionApi->DeleteCollection");


            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("key", HiarcSDK.Client.ClientUtils.ParameterToString(key)); // path parameter
            if (xHiarcUserKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-User-Key", HiarcSDK.Client.ClientUtils.ParameterToString(xHiarcUserKey)); // header parameter
            }

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }
            // authentication (JWTBearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/collections/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find a Collection 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findCollectionsRequest">Collection query</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>List&lt;Collection&gt;</returns>
        public List<Collection> FindCollection (FindCollectionsRequest findCollectionsRequest, string xHiarcUserKey = default(string))
        {
             HiarcSDK.Client.ApiResponse<List<Collection>> localVarResponse = FindCollectionWithHttpInfo(findCollectionsRequest, xHiarcUserKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find a Collection 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findCollectionsRequest">Collection query</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>ApiResponse of List&lt;Collection&gt;</returns>
        public HiarcSDK.Client.ApiResponse< List<Collection> > FindCollectionWithHttpInfo (FindCollectionsRequest findCollectionsRequest, string xHiarcUserKey = default(string))
        {
            // verify the required parameter 'findCollectionsRequest' is set
            if (findCollectionsRequest == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'findCollectionsRequest' when calling CollectionApi->FindCollection");

            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = HiarcSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HiarcSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xHiarcUserKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-User-Key", HiarcSDK.Client.ClientUtils.ParameterToString(xHiarcUserKey)); // header parameter
            }
            localVarRequestOptions.Data = findCollectionsRequest;

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }
            // authentication (JWTBearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< List<Collection> >("/collections/find", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find a Collection 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findCollectionsRequest">Collection query</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of List&lt;Collection&gt;</returns>
        public async System.Threading.Tasks.Task<List<Collection>> FindCollectionAsync (FindCollectionsRequest findCollectionsRequest, string xHiarcUserKey = default(string))
        {
             HiarcSDK.Client.ApiResponse<List<Collection>> localVarResponse = await FindCollectionAsyncWithHttpInfo(findCollectionsRequest, xHiarcUserKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find a Collection 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findCollectionsRequest">Collection query</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Collection&gt;)</returns>
        public async System.Threading.Tasks.Task<HiarcSDK.Client.ApiResponse<List<Collection>>> FindCollectionAsyncWithHttpInfo (FindCollectionsRequest findCollectionsRequest, string xHiarcUserKey = default(string))
        {
            // verify the required parameter 'findCollectionsRequest' is set
            if (findCollectionsRequest == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'findCollectionsRequest' when calling CollectionApi->FindCollection");


            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (xHiarcUserKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-User-Key", HiarcSDK.Client.ClientUtils.ParameterToString(xHiarcUserKey)); // header parameter
            }
            localVarRequestOptions.Data = findCollectionsRequest;

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }
            // authentication (JWTBearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<Collection>>("/collections/find", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all Collections 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>List&lt;Collection&gt;</returns>
        public List<Collection> GetAllCollections (string xHiarcUserKey = default(string))
        {
             HiarcSDK.Client.ApiResponse<List<Collection>> localVarResponse = GetAllCollectionsWithHttpInfo(xHiarcUserKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all Collections 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>ApiResponse of List&lt;Collection&gt;</returns>
        public HiarcSDK.Client.ApiResponse< List<Collection> > GetAllCollectionsWithHttpInfo (string xHiarcUserKey = default(string))
        {
            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = HiarcSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HiarcSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xHiarcUserKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-User-Key", HiarcSDK.Client.ClientUtils.ParameterToString(xHiarcUserKey)); // header parameter
            }

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Collection> >("/collections", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllCollections", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all Collections 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of List&lt;Collection&gt;</returns>
        public async System.Threading.Tasks.Task<List<Collection>> GetAllCollectionsAsync (string xHiarcUserKey = default(string))
        {
             HiarcSDK.Client.ApiResponse<List<Collection>> localVarResponse = await GetAllCollectionsAsyncWithHttpInfo(xHiarcUserKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all Collections 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Collection&gt;)</returns>
        public async System.Threading.Tasks.Task<HiarcSDK.Client.ApiResponse<List<Collection>>> GetAllCollectionsAsyncWithHttpInfo (string xHiarcUserKey = default(string))
        {

            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (xHiarcUserKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-User-Key", HiarcSDK.Client.ClientUtils.ParameterToString(xHiarcUserKey)); // header parameter
            }

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Collection>>("/collections", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllCollections", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Collection&#39;s Info 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of collection to get info</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Collection</returns>
        public Collection GetCollection (string key, string xHiarcUserKey = default(string))
        {
             HiarcSDK.Client.ApiResponse<Collection> localVarResponse = GetCollectionWithHttpInfo(key, xHiarcUserKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Collection&#39;s Info 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of collection to get info</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>ApiResponse of Collection</returns>
        public HiarcSDK.Client.ApiResponse< Collection > GetCollectionWithHttpInfo (string key, string xHiarcUserKey = default(string))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'key' when calling CollectionApi->GetCollection");

            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = HiarcSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HiarcSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", HiarcSDK.Client.ClientUtils.ParameterToString(key)); // path parameter
            if (xHiarcUserKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-User-Key", HiarcSDK.Client.ClientUtils.ParameterToString(xHiarcUserKey)); // header parameter
            }

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }
            // authentication (JWTBearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Collection >("/collections/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Collection&#39;s Info 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of collection to get info</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of Collection</returns>
        public async System.Threading.Tasks.Task<Collection> GetCollectionAsync (string key, string xHiarcUserKey = default(string))
        {
             HiarcSDK.Client.ApiResponse<Collection> localVarResponse = await GetCollectionAsyncWithHttpInfo(key, xHiarcUserKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a Collection&#39;s Info 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of collection to get info</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of ApiResponse (Collection)</returns>
        public async System.Threading.Tasks.Task<HiarcSDK.Client.ApiResponse<Collection>> GetCollectionAsyncWithHttpInfo (string key, string xHiarcUserKey = default(string))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'key' when calling CollectionApi->GetCollection");


            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("key", HiarcSDK.Client.ClientUtils.ParameterToString(key)); // path parameter
            if (xHiarcUserKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-User-Key", HiarcSDK.Client.ClientUtils.ParameterToString(xHiarcUserKey)); // header parameter
            }

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }
            // authentication (JWTBearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Collection>("/collections/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Collection&#39;s child Collections 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of collection</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>List&lt;Collection&gt;</returns>
        public List<Collection> GetCollectionChildren (string key, string xHiarcUserKey = default(string))
        {
             HiarcSDK.Client.ApiResponse<List<Collection>> localVarResponse = GetCollectionChildrenWithHttpInfo(key, xHiarcUserKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Collection&#39;s child Collections 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of collection</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>ApiResponse of List&lt;Collection&gt;</returns>
        public HiarcSDK.Client.ApiResponse< List<Collection> > GetCollectionChildrenWithHttpInfo (string key, string xHiarcUserKey = default(string))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'key' when calling CollectionApi->GetCollectionChildren");

            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = HiarcSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HiarcSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", HiarcSDK.Client.ClientUtils.ParameterToString(key)); // path parameter
            if (xHiarcUserKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-User-Key", HiarcSDK.Client.ClientUtils.ParameterToString(xHiarcUserKey)); // header parameter
            }

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }
            // authentication (JWTBearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Collection> >("/collections/{key}/children", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCollectionChildren", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Collection&#39;s child Collections 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of collection</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of List&lt;Collection&gt;</returns>
        public async System.Threading.Tasks.Task<List<Collection>> GetCollectionChildrenAsync (string key, string xHiarcUserKey = default(string))
        {
             HiarcSDK.Client.ApiResponse<List<Collection>> localVarResponse = await GetCollectionChildrenAsyncWithHttpInfo(key, xHiarcUserKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a Collection&#39;s child Collections 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of collection</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Collection&gt;)</returns>
        public async System.Threading.Tasks.Task<HiarcSDK.Client.ApiResponse<List<Collection>>> GetCollectionChildrenAsyncWithHttpInfo (string key, string xHiarcUserKey = default(string))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'key' when calling CollectionApi->GetCollectionChildren");


            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("key", HiarcSDK.Client.ClientUtils.ParameterToString(key)); // path parameter
            if (xHiarcUserKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-User-Key", HiarcSDK.Client.ClientUtils.ParameterToString(xHiarcUserKey)); // header parameter
            }

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }
            // authentication (JWTBearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Collection>>("/collections/{key}/children", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCollectionChildren", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Collection&#39;s Files 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of collection</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>List&lt;File&gt;</returns>
        public List<File> GetCollectionFiles (string key, string xHiarcUserKey = default(string))
        {
             HiarcSDK.Client.ApiResponse<List<File>> localVarResponse = GetCollectionFilesWithHttpInfo(key, xHiarcUserKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Collection&#39;s Files 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of collection</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>ApiResponse of List&lt;File&gt;</returns>
        public HiarcSDK.Client.ApiResponse< List<File> > GetCollectionFilesWithHttpInfo (string key, string xHiarcUserKey = default(string))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'key' when calling CollectionApi->GetCollectionFiles");

            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = HiarcSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HiarcSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", HiarcSDK.Client.ClientUtils.ParameterToString(key)); // path parameter
            if (xHiarcUserKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-User-Key", HiarcSDK.Client.ClientUtils.ParameterToString(xHiarcUserKey)); // header parameter
            }

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }
            // authentication (JWTBearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<File> >("/collections/{key}/files", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCollectionFiles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Collection&#39;s Files 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of collection</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of List&lt;File&gt;</returns>
        public async System.Threading.Tasks.Task<List<File>> GetCollectionFilesAsync (string key, string xHiarcUserKey = default(string))
        {
             HiarcSDK.Client.ApiResponse<List<File>> localVarResponse = await GetCollectionFilesAsyncWithHttpInfo(key, xHiarcUserKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a Collection&#39;s Files 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of collection</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;File&gt;)</returns>
        public async System.Threading.Tasks.Task<HiarcSDK.Client.ApiResponse<List<File>>> GetCollectionFilesAsyncWithHttpInfo (string key, string xHiarcUserKey = default(string))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'key' when calling CollectionApi->GetCollectionFiles");


            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("key", HiarcSDK.Client.ClientUtils.ParameterToString(key)); // path parameter
            if (xHiarcUserKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-User-Key", HiarcSDK.Client.ClientUtils.ParameterToString(xHiarcUserKey)); // header parameter
            }

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }
            // authentication (JWTBearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<File>>("/collections/{key}/files", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCollectionFiles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Collection&#39;s child items, including Collections and Files 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of collection</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>CollectionItems</returns>
        public CollectionItems GetCollectionItems (string key, string xHiarcUserKey = default(string))
        {
             HiarcSDK.Client.ApiResponse<CollectionItems> localVarResponse = GetCollectionItemsWithHttpInfo(key, xHiarcUserKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Collection&#39;s child items, including Collections and Files 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of collection</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>ApiResponse of CollectionItems</returns>
        public HiarcSDK.Client.ApiResponse< CollectionItems > GetCollectionItemsWithHttpInfo (string key, string xHiarcUserKey = default(string))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'key' when calling CollectionApi->GetCollectionItems");

            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = HiarcSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HiarcSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", HiarcSDK.Client.ClientUtils.ParameterToString(key)); // path parameter
            if (xHiarcUserKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-User-Key", HiarcSDK.Client.ClientUtils.ParameterToString(xHiarcUserKey)); // header parameter
            }

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }
            // authentication (JWTBearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< CollectionItems >("/collections/{key}/items", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCollectionItems", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Collection&#39;s child items, including Collections and Files 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of collection</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of CollectionItems</returns>
        public async System.Threading.Tasks.Task<CollectionItems> GetCollectionItemsAsync (string key, string xHiarcUserKey = default(string))
        {
             HiarcSDK.Client.ApiResponse<CollectionItems> localVarResponse = await GetCollectionItemsAsyncWithHttpInfo(key, xHiarcUserKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a Collection&#39;s child items, including Collections and Files 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of collection</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of ApiResponse (CollectionItems)</returns>
        public async System.Threading.Tasks.Task<HiarcSDK.Client.ApiResponse<CollectionItems>> GetCollectionItemsAsyncWithHttpInfo (string key, string xHiarcUserKey = default(string))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'key' when calling CollectionApi->GetCollectionItems");


            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("key", HiarcSDK.Client.ClientUtils.ParameterToString(key)); // path parameter
            if (xHiarcUserKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-User-Key", HiarcSDK.Client.ClientUtils.ParameterToString(xHiarcUserKey)); // header parameter
            }

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }
            // authentication (JWTBearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CollectionItems>("/collections/{key}/items", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCollectionItems", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a File from a Collection 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Collection</param>
        /// <param name="fileKey">Key of File to remove from Collection</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Object</returns>
        public Object RemoveFileFromCollection (string key, string fileKey, string xHiarcUserKey = default(string))
        {
             HiarcSDK.Client.ApiResponse<Object> localVarResponse = RemoveFileFromCollectionWithHttpInfo(key, fileKey, xHiarcUserKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove a File from a Collection 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Collection</param>
        /// <param name="fileKey">Key of File to remove from Collection</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public HiarcSDK.Client.ApiResponse< Object > RemoveFileFromCollectionWithHttpInfo (string key, string fileKey, string xHiarcUserKey = default(string))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'key' when calling CollectionApi->RemoveFileFromCollection");

            // verify the required parameter 'fileKey' is set
            if (fileKey == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'fileKey' when calling CollectionApi->RemoveFileFromCollection");

            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = HiarcSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HiarcSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", HiarcSDK.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.PathParameters.Add("fileKey", HiarcSDK.Client.ClientUtils.ParameterToString(fileKey)); // path parameter
            if (xHiarcUserKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-User-Key", HiarcSDK.Client.ClientUtils.ParameterToString(xHiarcUserKey)); // header parameter
            }

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }
            // authentication (JWTBearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete< Object >("/collections/{key}/files/{fileKey}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveFileFromCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a File from a Collection 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Collection</param>
        /// <param name="fileKey">Key of File to remove from Collection</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> RemoveFileFromCollectionAsync (string key, string fileKey, string xHiarcUserKey = default(string))
        {
             HiarcSDK.Client.ApiResponse<Object> localVarResponse = await RemoveFileFromCollectionAsyncWithHttpInfo(key, fileKey, xHiarcUserKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove a File from a Collection 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Collection</param>
        /// <param name="fileKey">Key of File to remove from Collection</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<HiarcSDK.Client.ApiResponse<Object>> RemoveFileFromCollectionAsyncWithHttpInfo (string key, string fileKey, string xHiarcUserKey = default(string))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'key' when calling CollectionApi->RemoveFileFromCollection");

            // verify the required parameter 'fileKey' is set
            if (fileKey == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'fileKey' when calling CollectionApi->RemoveFileFromCollection");


            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("key", HiarcSDK.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.PathParameters.Add("fileKey", HiarcSDK.Client.ClientUtils.ParameterToString(fileKey)); // path parameter
            if (xHiarcUserKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-User-Key", HiarcSDK.Client.ClientUtils.ParameterToString(xHiarcUserKey)); // header parameter
            }

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }
            // authentication (JWTBearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/collections/{key}/files/{fileKey}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveFileFromCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Collection 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of collection to get info</param>
        /// <param name="updateCollectionRequest">Collection information</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Collection</returns>
        public Collection UpdateCollection (string key, UpdateCollectionRequest updateCollectionRequest, string xHiarcUserKey = default(string))
        {
             HiarcSDK.Client.ApiResponse<Collection> localVarResponse = UpdateCollectionWithHttpInfo(key, updateCollectionRequest, xHiarcUserKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Collection 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of collection to get info</param>
        /// <param name="updateCollectionRequest">Collection information</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>ApiResponse of Collection</returns>
        public HiarcSDK.Client.ApiResponse< Collection > UpdateCollectionWithHttpInfo (string key, UpdateCollectionRequest updateCollectionRequest, string xHiarcUserKey = default(string))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'key' when calling CollectionApi->UpdateCollection");

            // verify the required parameter 'updateCollectionRequest' is set
            if (updateCollectionRequest == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'updateCollectionRequest' when calling CollectionApi->UpdateCollection");

            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = HiarcSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HiarcSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", HiarcSDK.Client.ClientUtils.ParameterToString(key)); // path parameter
            if (xHiarcUserKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-User-Key", HiarcSDK.Client.ClientUtils.ParameterToString(xHiarcUserKey)); // header parameter
            }
            localVarRequestOptions.Data = updateCollectionRequest;

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }
            // authentication (JWTBearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< Collection >("/collections/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Collection 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of collection to get info</param>
        /// <param name="updateCollectionRequest">Collection information</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of Collection</returns>
        public async System.Threading.Tasks.Task<Collection> UpdateCollectionAsync (string key, UpdateCollectionRequest updateCollectionRequest, string xHiarcUserKey = default(string))
        {
             HiarcSDK.Client.ApiResponse<Collection> localVarResponse = await UpdateCollectionAsyncWithHttpInfo(key, updateCollectionRequest, xHiarcUserKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a Collection 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of collection to get info</param>
        /// <param name="updateCollectionRequest">Collection information</param>
        /// <param name="xHiarcUserKey">Optional key of user to impersonate (optional)</param>
        /// <returns>Task of ApiResponse (Collection)</returns>
        public async System.Threading.Tasks.Task<HiarcSDK.Client.ApiResponse<Collection>> UpdateCollectionAsyncWithHttpInfo (string key, UpdateCollectionRequest updateCollectionRequest, string xHiarcUserKey = default(string))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'key' when calling CollectionApi->UpdateCollection");

            // verify the required parameter 'updateCollectionRequest' is set
            if (updateCollectionRequest == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'updateCollectionRequest' when calling CollectionApi->UpdateCollection");


            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("key", HiarcSDK.Client.ClientUtils.ParameterToString(key)); // path parameter
            if (xHiarcUserKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-User-Key", HiarcSDK.Client.ClientUtils.ParameterToString(xHiarcUserKey)); // header parameter
            }
            localVarRequestOptions.Data = updateCollectionRequest;

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }
            // authentication (JWTBearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Collection>("/collections/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
