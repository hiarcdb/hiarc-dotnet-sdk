/* 
 * Hiarc API
 *
 * Welcome to the Hiarc API documentation.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using HiarcSDK.Client;
using HiarcSDK.Model;

namespace HiarcSDK.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRetentionPolicyApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a Retention Policy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createRetentionPolicyRequest">Retention Policy information</param>
        /// <returns>RetentionPolicy</returns>
        RetentionPolicy CreateRetentionPolicy (CreateRetentionPolicyRequest createRetentionPolicyRequest);

        /// <summary>
        /// Create a Retention Policy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createRetentionPolicyRequest">Retention Policy information</param>
        /// <returns>ApiResponse of RetentionPolicy</returns>
        ApiResponse<RetentionPolicy> CreateRetentionPolicyWithHttpInfo (CreateRetentionPolicyRequest createRetentionPolicyRequest);
        /// <summary>
        /// Find a Retention Policy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findRetentionPoliciesRequest">Retention Policy query</param>
        /// <returns>List&lt;RetentionPolicy&gt;</returns>
        List<RetentionPolicy> FindRetentionPolicies (FindRetentionPoliciesRequest findRetentionPoliciesRequest);

        /// <summary>
        /// Find a Retention Policy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findRetentionPoliciesRequest">Retention Policy query</param>
        /// <returns>ApiResponse of List&lt;RetentionPolicy&gt;</returns>
        ApiResponse<List<RetentionPolicy>> FindRetentionPoliciesWithHttpInfo (FindRetentionPoliciesRequest findRetentionPoliciesRequest);
        /// <summary>
        /// Get all Retention Policies
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;RetentionPolicy&gt;</returns>
        List<RetentionPolicy> GetAllRetentionPolicies ();

        /// <summary>
        /// Get all Retention Policies
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;RetentionPolicy&gt;</returns>
        ApiResponse<List<RetentionPolicy>> GetAllRetentionPoliciesWithHttpInfo ();
        /// <summary>
        /// Get a Retention Policy&#39;s Info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Retention Policy to get info</param>
        /// <returns>RetentionPolicy</returns>
        RetentionPolicy GetRetentionPolicy (string key);

        /// <summary>
        /// Get a Retention Policy&#39;s Info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Retention Policy to get info</param>
        /// <returns>ApiResponse of RetentionPolicy</returns>
        ApiResponse<RetentionPolicy> GetRetentionPolicyWithHttpInfo (string key);
        /// <summary>
        /// Update a Retention Policy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Retention Policy to update</param>
        /// <param name="updateRetentionPolicyRequest">RetentionPolicy information</param>
        /// <returns>RetentionPolicy</returns>
        RetentionPolicy UpdateRetentionPolicy (string key, UpdateRetentionPolicyRequest updateRetentionPolicyRequest);

        /// <summary>
        /// Update a Retention Policy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Retention Policy to update</param>
        /// <param name="updateRetentionPolicyRequest">RetentionPolicy information</param>
        /// <returns>ApiResponse of RetentionPolicy</returns>
        ApiResponse<RetentionPolicy> UpdateRetentionPolicyWithHttpInfo (string key, UpdateRetentionPolicyRequest updateRetentionPolicyRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRetentionPolicyApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a Retention Policy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createRetentionPolicyRequest">Retention Policy information</param>
        /// <returns>Task of RetentionPolicy</returns>
        System.Threading.Tasks.Task<RetentionPolicy> CreateRetentionPolicyAsync (CreateRetentionPolicyRequest createRetentionPolicyRequest);

        /// <summary>
        /// Create a Retention Policy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createRetentionPolicyRequest">Retention Policy information</param>
        /// <returns>Task of ApiResponse (RetentionPolicy)</returns>
        System.Threading.Tasks.Task<ApiResponse<RetentionPolicy>> CreateRetentionPolicyAsyncWithHttpInfo (CreateRetentionPolicyRequest createRetentionPolicyRequest);
        /// <summary>
        /// Find a Retention Policy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findRetentionPoliciesRequest">Retention Policy query</param>
        /// <returns>Task of List&lt;RetentionPolicy&gt;</returns>
        System.Threading.Tasks.Task<List<RetentionPolicy>> FindRetentionPoliciesAsync (FindRetentionPoliciesRequest findRetentionPoliciesRequest);

        /// <summary>
        /// Find a Retention Policy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findRetentionPoliciesRequest">Retention Policy query</param>
        /// <returns>Task of ApiResponse (List&lt;RetentionPolicy&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RetentionPolicy>>> FindRetentionPoliciesAsyncWithHttpInfo (FindRetentionPoliciesRequest findRetentionPoliciesRequest);
        /// <summary>
        /// Get all Retention Policies
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;RetentionPolicy&gt;</returns>
        System.Threading.Tasks.Task<List<RetentionPolicy>> GetAllRetentionPoliciesAsync ();

        /// <summary>
        /// Get all Retention Policies
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;RetentionPolicy&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RetentionPolicy>>> GetAllRetentionPoliciesAsyncWithHttpInfo ();
        /// <summary>
        /// Get a Retention Policy&#39;s Info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Retention Policy to get info</param>
        /// <returns>Task of RetentionPolicy</returns>
        System.Threading.Tasks.Task<RetentionPolicy> GetRetentionPolicyAsync (string key);

        /// <summary>
        /// Get a Retention Policy&#39;s Info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Retention Policy to get info</param>
        /// <returns>Task of ApiResponse (RetentionPolicy)</returns>
        System.Threading.Tasks.Task<ApiResponse<RetentionPolicy>> GetRetentionPolicyAsyncWithHttpInfo (string key);
        /// <summary>
        /// Update a Retention Policy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Retention Policy to update</param>
        /// <param name="updateRetentionPolicyRequest">RetentionPolicy information</param>
        /// <returns>Task of RetentionPolicy</returns>
        System.Threading.Tasks.Task<RetentionPolicy> UpdateRetentionPolicyAsync (string key, UpdateRetentionPolicyRequest updateRetentionPolicyRequest);

        /// <summary>
        /// Update a Retention Policy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Retention Policy to update</param>
        /// <param name="updateRetentionPolicyRequest">RetentionPolicy information</param>
        /// <returns>Task of ApiResponse (RetentionPolicy)</returns>
        System.Threading.Tasks.Task<ApiResponse<RetentionPolicy>> UpdateRetentionPolicyAsyncWithHttpInfo (string key, UpdateRetentionPolicyRequest updateRetentionPolicyRequest);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRetentionPolicyApi : IRetentionPolicyApiSync, IRetentionPolicyApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RetentionPolicyApi : IRetentionPolicyApi
    {
        private HiarcSDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RetentionPolicyApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RetentionPolicyApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RetentionPolicyApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RetentionPolicyApi(String basePath)
        {
            this.Configuration = HiarcSDK.Client.Configuration.MergeConfigurations(
                HiarcSDK.Client.GlobalConfiguration.Instance,
                new HiarcSDK.Client.Configuration { BasePath = basePath }
            );
            this.Client = new HiarcSDK.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HiarcSDK.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = HiarcSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RetentionPolicyApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RetentionPolicyApi(HiarcSDK.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = HiarcSDK.Client.Configuration.MergeConfigurations(
                HiarcSDK.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new HiarcSDK.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HiarcSDK.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = HiarcSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RetentionPolicyApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RetentionPolicyApi(HiarcSDK.Client.ISynchronousClient client,HiarcSDK.Client.IAsynchronousClient asyncClient, HiarcSDK.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = HiarcSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public HiarcSDK.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public HiarcSDK.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public HiarcSDK.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public HiarcSDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a Retention Policy 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createRetentionPolicyRequest">Retention Policy information</param>
        /// <returns>RetentionPolicy</returns>
        public RetentionPolicy CreateRetentionPolicy (CreateRetentionPolicyRequest createRetentionPolicyRequest)
        {
             HiarcSDK.Client.ApiResponse<RetentionPolicy> localVarResponse = CreateRetentionPolicyWithHttpInfo(createRetentionPolicyRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Retention Policy 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createRetentionPolicyRequest">Retention Policy information</param>
        /// <returns>ApiResponse of RetentionPolicy</returns>
        public HiarcSDK.Client.ApiResponse< RetentionPolicy > CreateRetentionPolicyWithHttpInfo (CreateRetentionPolicyRequest createRetentionPolicyRequest)
        {
            // verify the required parameter 'createRetentionPolicyRequest' is set
            if (createRetentionPolicyRequest == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'createRetentionPolicyRequest' when calling RetentionPolicyApi->CreateRetentionPolicy");

            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = HiarcSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HiarcSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createRetentionPolicyRequest;

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< RetentionPolicy >("/retentionpolicies", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRetentionPolicy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Retention Policy 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createRetentionPolicyRequest">Retention Policy information</param>
        /// <returns>Task of RetentionPolicy</returns>
        public async System.Threading.Tasks.Task<RetentionPolicy> CreateRetentionPolicyAsync (CreateRetentionPolicyRequest createRetentionPolicyRequest)
        {
             HiarcSDK.Client.ApiResponse<RetentionPolicy> localVarResponse = await CreateRetentionPolicyAsyncWithHttpInfo(createRetentionPolicyRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a Retention Policy 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createRetentionPolicyRequest">Retention Policy information</param>
        /// <returns>Task of ApiResponse (RetentionPolicy)</returns>
        public async System.Threading.Tasks.Task<HiarcSDK.Client.ApiResponse<RetentionPolicy>> CreateRetentionPolicyAsyncWithHttpInfo (CreateRetentionPolicyRequest createRetentionPolicyRequest)
        {
            // verify the required parameter 'createRetentionPolicyRequest' is set
            if (createRetentionPolicyRequest == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'createRetentionPolicyRequest' when calling RetentionPolicyApi->CreateRetentionPolicy");


            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = createRetentionPolicyRequest;

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<RetentionPolicy>("/retentionpolicies", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRetentionPolicy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find a Retention Policy 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findRetentionPoliciesRequest">Retention Policy query</param>
        /// <returns>List&lt;RetentionPolicy&gt;</returns>
        public List<RetentionPolicy> FindRetentionPolicies (FindRetentionPoliciesRequest findRetentionPoliciesRequest)
        {
             HiarcSDK.Client.ApiResponse<List<RetentionPolicy>> localVarResponse = FindRetentionPoliciesWithHttpInfo(findRetentionPoliciesRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find a Retention Policy 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findRetentionPoliciesRequest">Retention Policy query</param>
        /// <returns>ApiResponse of List&lt;RetentionPolicy&gt;</returns>
        public HiarcSDK.Client.ApiResponse< List<RetentionPolicy> > FindRetentionPoliciesWithHttpInfo (FindRetentionPoliciesRequest findRetentionPoliciesRequest)
        {
            // verify the required parameter 'findRetentionPoliciesRequest' is set
            if (findRetentionPoliciesRequest == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'findRetentionPoliciesRequest' when calling RetentionPolicyApi->FindRetentionPolicies");

            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = HiarcSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HiarcSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = findRetentionPoliciesRequest;

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< List<RetentionPolicy> >("/retentionpolicies/find", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindRetentionPolicies", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find a Retention Policy 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findRetentionPoliciesRequest">Retention Policy query</param>
        /// <returns>Task of List&lt;RetentionPolicy&gt;</returns>
        public async System.Threading.Tasks.Task<List<RetentionPolicy>> FindRetentionPoliciesAsync (FindRetentionPoliciesRequest findRetentionPoliciesRequest)
        {
             HiarcSDK.Client.ApiResponse<List<RetentionPolicy>> localVarResponse = await FindRetentionPoliciesAsyncWithHttpInfo(findRetentionPoliciesRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find a Retention Policy 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findRetentionPoliciesRequest">Retention Policy query</param>
        /// <returns>Task of ApiResponse (List&lt;RetentionPolicy&gt;)</returns>
        public async System.Threading.Tasks.Task<HiarcSDK.Client.ApiResponse<List<RetentionPolicy>>> FindRetentionPoliciesAsyncWithHttpInfo (FindRetentionPoliciesRequest findRetentionPoliciesRequest)
        {
            // verify the required parameter 'findRetentionPoliciesRequest' is set
            if (findRetentionPoliciesRequest == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'findRetentionPoliciesRequest' when calling RetentionPolicyApi->FindRetentionPolicies");


            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = findRetentionPoliciesRequest;

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<RetentionPolicy>>("/retentionpolicies/find", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindRetentionPolicies", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all Retention Policies 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;RetentionPolicy&gt;</returns>
        public List<RetentionPolicy> GetAllRetentionPolicies ()
        {
             HiarcSDK.Client.ApiResponse<List<RetentionPolicy>> localVarResponse = GetAllRetentionPoliciesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all Retention Policies 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;RetentionPolicy&gt;</returns>
        public HiarcSDK.Client.ApiResponse< List<RetentionPolicy> > GetAllRetentionPoliciesWithHttpInfo ()
        {
            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = HiarcSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HiarcSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<RetentionPolicy> >("/retentionpolicies", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllRetentionPolicies", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all Retention Policies 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;RetentionPolicy&gt;</returns>
        public async System.Threading.Tasks.Task<List<RetentionPolicy>> GetAllRetentionPoliciesAsync ()
        {
             HiarcSDK.Client.ApiResponse<List<RetentionPolicy>> localVarResponse = await GetAllRetentionPoliciesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all Retention Policies 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;RetentionPolicy&gt;)</returns>
        public async System.Threading.Tasks.Task<HiarcSDK.Client.ApiResponse<List<RetentionPolicy>>> GetAllRetentionPoliciesAsyncWithHttpInfo ()
        {

            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<RetentionPolicy>>("/retentionpolicies", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllRetentionPolicies", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Retention Policy&#39;s Info 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Retention Policy to get info</param>
        /// <returns>RetentionPolicy</returns>
        public RetentionPolicy GetRetentionPolicy (string key)
        {
             HiarcSDK.Client.ApiResponse<RetentionPolicy> localVarResponse = GetRetentionPolicyWithHttpInfo(key);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Retention Policy&#39;s Info 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Retention Policy to get info</param>
        /// <returns>ApiResponse of RetentionPolicy</returns>
        public HiarcSDK.Client.ApiResponse< RetentionPolicy > GetRetentionPolicyWithHttpInfo (string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'key' when calling RetentionPolicyApi->GetRetentionPolicy");

            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = HiarcSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HiarcSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", HiarcSDK.Client.ClientUtils.ParameterToString(key)); // path parameter

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< RetentionPolicy >("/retentionpolicies/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRetentionPolicy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Retention Policy&#39;s Info 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Retention Policy to get info</param>
        /// <returns>Task of RetentionPolicy</returns>
        public async System.Threading.Tasks.Task<RetentionPolicy> GetRetentionPolicyAsync (string key)
        {
             HiarcSDK.Client.ApiResponse<RetentionPolicy> localVarResponse = await GetRetentionPolicyAsyncWithHttpInfo(key);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a Retention Policy&#39;s Info 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Retention Policy to get info</param>
        /// <returns>Task of ApiResponse (RetentionPolicy)</returns>
        public async System.Threading.Tasks.Task<HiarcSDK.Client.ApiResponse<RetentionPolicy>> GetRetentionPolicyAsyncWithHttpInfo (string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'key' when calling RetentionPolicyApi->GetRetentionPolicy");


            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("key", HiarcSDK.Client.ClientUtils.ParameterToString(key)); // path parameter

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<RetentionPolicy>("/retentionpolicies/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRetentionPolicy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Retention Policy 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Retention Policy to update</param>
        /// <param name="updateRetentionPolicyRequest">RetentionPolicy information</param>
        /// <returns>RetentionPolicy</returns>
        public RetentionPolicy UpdateRetentionPolicy (string key, UpdateRetentionPolicyRequest updateRetentionPolicyRequest)
        {
             HiarcSDK.Client.ApiResponse<RetentionPolicy> localVarResponse = UpdateRetentionPolicyWithHttpInfo(key, updateRetentionPolicyRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Retention Policy 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Retention Policy to update</param>
        /// <param name="updateRetentionPolicyRequest">RetentionPolicy information</param>
        /// <returns>ApiResponse of RetentionPolicy</returns>
        public HiarcSDK.Client.ApiResponse< RetentionPolicy > UpdateRetentionPolicyWithHttpInfo (string key, UpdateRetentionPolicyRequest updateRetentionPolicyRequest)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'key' when calling RetentionPolicyApi->UpdateRetentionPolicy");

            // verify the required parameter 'updateRetentionPolicyRequest' is set
            if (updateRetentionPolicyRequest == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'updateRetentionPolicyRequest' when calling RetentionPolicyApi->UpdateRetentionPolicy");

            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = HiarcSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HiarcSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", HiarcSDK.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.Data = updateRetentionPolicyRequest;

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< RetentionPolicy >("/retentionpolicies/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRetentionPolicy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Retention Policy 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Retention Policy to update</param>
        /// <param name="updateRetentionPolicyRequest">RetentionPolicy information</param>
        /// <returns>Task of RetentionPolicy</returns>
        public async System.Threading.Tasks.Task<RetentionPolicy> UpdateRetentionPolicyAsync (string key, UpdateRetentionPolicyRequest updateRetentionPolicyRequest)
        {
             HiarcSDK.Client.ApiResponse<RetentionPolicy> localVarResponse = await UpdateRetentionPolicyAsyncWithHttpInfo(key, updateRetentionPolicyRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a Retention Policy 
        /// </summary>
        /// <exception cref="HiarcSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key of Retention Policy to update</param>
        /// <param name="updateRetentionPolicyRequest">RetentionPolicy information</param>
        /// <returns>Task of ApiResponse (RetentionPolicy)</returns>
        public async System.Threading.Tasks.Task<HiarcSDK.Client.ApiResponse<RetentionPolicy>> UpdateRetentionPolicyAsyncWithHttpInfo (string key, UpdateRetentionPolicyRequest updateRetentionPolicyRequest)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'key' when calling RetentionPolicyApi->UpdateRetentionPolicy");

            // verify the required parameter 'updateRetentionPolicyRequest' is set
            if (updateRetentionPolicyRequest == null)
                throw new HiarcSDK.Client.ApiException(400, "Missing required parameter 'updateRetentionPolicyRequest' when calling RetentionPolicyApi->UpdateRetentionPolicy");


            HiarcSDK.Client.RequestOptions localVarRequestOptions = new HiarcSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("key", HiarcSDK.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.Data = updateRetentionPolicyRequest;

            // authentication (AdminApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Hiarc-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Hiarc-Api-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<RetentionPolicy>("/retentionpolicies/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRetentionPolicy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
